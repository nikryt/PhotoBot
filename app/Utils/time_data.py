import asyncio
import time
from aiogram import Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∞—É—Ç–∞
TIMEOUT_SECONDS_300 = 300  # 5 –º–∏–Ω—É—Ç
TIMEOUT_SECONDS_30 = 30  # 30 —Å–µ–∫—É–Ω–¥
COUNTDOWN_STEP_10 = 10  # –®–∞–≥ –æ—Ç—Å—á—ë—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
COUNTDOWN_STEP_5 = 5  # –®–∞–≥ –æ—Ç—Å—á—ë—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


async def schedule_countdown(
        message: Message,
        bot: Bot,
        state: FSMContext,
        timeout: int = TIMEOUT_SECONDS_30
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞ –¥–ª—è –º–µ–Ω—é"""
    data = await state.get_data()

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'countdown_task' in data:
        data['countdown_task'].cancel()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—Ç—Å—á—ë—Ç–∞
    countdown_task = asyncio.create_task(
        _countdown_handler(message, bot, state, timeout)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        countdown_task=countdown_task,
        last_activity=time.time()
    )


async def _countdown_handler(
        message: Message,
        bot: Bot,
        state: FSMContext,
        timeout: int
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á—ë—Ç–∞"""
    try:
        remaining = timeout
        warning_sent = False
        countdown_msg = None

        while remaining > 0:
            await asyncio.sleep(COUNTDOWN_STEP_5)
            remaining -= COUNTDOWN_STEP_5

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await state.get_data()
            if data.get('last_activity', 0) > time.time() - COUNTDOWN_STEP_5:
                remaining = timeout  # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                warning_sent = False
                if countdown_msg:
                    await countdown_msg.delete()
                continue

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if remaining <= 60 and not warning_sent:
                countdown_msg = await bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫."
                )
                warning_sent = True
            elif warning_sent:
                try:
                    await countdown_msg.edit_text(
                        f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫."
                    )
                except:
                    pass

        # –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
        await bot.send_message(
            message.chat.id,
            "üö´ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –í—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é."
        )
        await state.clear()

    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        if countdown_msg:
            await countdown_msg.delete()
    finally:
        await state.update_data(countdown_task=None)