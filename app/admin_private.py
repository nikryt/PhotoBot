import json
import logging

from pathlib import Path
from aiogram import F, Router, types, Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup

from app.Filters.chat_types import ChatTypeFilter, IsAdmin  # –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
from app.generate import ai_generate
from app.handlers import Gen

from app.Utils.schedule_parser import ScheduleParser
from app.Utils.sheet_writer import SheetWriter

import app.keyboards as kb
import app.database.requests as rq
import app.Sheets.function as fu
import app.Utils.validators as vl


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É ExportDB –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
EXPORT_DIR = Path("ExportDB")
EXPORT_DIR.mkdir(exist_ok=True, parents=True)

@admin_router.message(Command("admin"))
async def admin_keyboard(message: types.Message):
    status = await rq.get_registration_status()
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=await kb.admin_keyboard(status)
    )

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä –ø–æ –µ–≥–æ ID
#     await message.reply_sticker(sticker='CAACAgIAAxkBAAPYZ36b1AUNHQg55cEEfzilVTX1lCYAArkRAAJClVFLVmGP6JmH07A2BA', reply_markup=ReplyKeyboardRemove())
# –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ò–º—è –∏–∑ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#    await message.reply(f'–ü—Ä–∏–≤–µ—Ç :) \n–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}\n'
#                        f'–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n–ù–∏–∫: @{message.from_user.username}')
#   await message.reply('–ö–∞–∫ –¥–µ–ª–∞?')


#=======================================================================================================================
# START –ü–æ–ª—É—á–∏—Ç—å ID –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
#=======================================================================================================================

# –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ñ–æ—Ç–æ –µ–≥–æ ID
@admin_router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')

# # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –µ–≥–æ ID
# @admin_router.message(F.document)
# async def get_document(message: Message):
#     await message.answer(f'ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {message.document.file_id}')
#
# async def process_document(message: types.Message, bot: Bot):
#     await save_document(message, bot)


# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä –µ–≥–æ ID –∏ ID —á–∞—Ç–∞
@admin_router.message(F.sticker)
async def check_sticker(message: Message):
    await message.answer(f'ID —Å—Ç–∏–∫–µ—Ä–∞: {message.sticker.file_id}')
    await message.answer(f'id —á–∞—Ç–∞: {message.from_user.id, message.chat.id}')

#=======================================================================================================================
# END –ü–æ–ª—É—á–∏—Ç—å ID –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
#=======================================================================================================================



#–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
@admin_router.message(F.text == "–ú–æ–∂–Ω–æ –≤—Å–µ—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def view_all_items(message: types.Message):
    for item in await rq.get_item():
        try:
            await message.answer_document(document=item.serial1,
                                          caption=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                                  f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                                  f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                                  f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                                  f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                                  f'ü™Ü –†–æ–ª—å: {item.role}',
                                          protect_content=True,
                                          reply_markup=await kb.edit_item(btns={
                                              '–£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                              '–ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'})
                                          )
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))

        except TelegramBadRequest:
            await message.answer(text=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                      f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                      f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                      f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                      f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                      f'ü™Ü –†–æ–ª—å: {item.role}',
                                 protect_content=True,
                                 message_effect_id="5046589136895476101",
                                 reply_markup=await kb.edit_item(btns={
                                     'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                     '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'}))
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await fu.number_row(item)
            # await fu.sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))

    await message.answer("–í–æ—Ç –≤—Å–µ, –ª—é–±—É–π—Å—è")

#–õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—é
@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_item(callback: CallbackQuery):
    item_id = callback.data.split("_")[-1]
    await  rq.del_item(int(item_id))
    await callback.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')
    await callback.message.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')



#=======================================================================================================================
# DeepSeek
#=======================================================================================================================
@admin_router.message(F.text == "–ø–æ–≥–æ–≤–æ—Ä–∏", )
async def deepseek(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?')
    await state.set_state(Gen.result)

@admin_router.message(Gen.result)
async def generating(message: Message, state: FSMContext):
    await state.set_state(Gen.wait)
    responses = await ai_generate(message.text)
    await message.answer(responses)
    await state.clear()

@admin_router.message(Gen.wait)
async def stop_flood(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏ —Ç—ã, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, —ç–π!')
#=======================================================================================================================
# DeepSeek
#=======================================================================================================================



#=======================================================================================================================
# START –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#=======================================================================================================================
@admin_router.callback_query(F.data == 'toggle_registration')
async def toggle_registration(callback: CallbackQuery):
    current_status = await rq.get_registration_status()
    new_status = not current_status
    await rq.set_registration_status(new_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=await kb.admin_keyboard(new_status)
    )
    await callback.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}!")
#=======================================================================================================================
# END –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#=======================================================================================================================

#=======================================================================================================================
# START –ü—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#=======================================================================================================================
@admin_router.callback_query(F.data == "add_editors_list")
async def show_editors_list(callback: CallbackQuery):
    editors = await rq.get_editors()

    if not editors:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã:",
        reply_markup=await kb.editors_list_keyboard(editors)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("confirm_editor_"))
async def confirm_editor(callback: CallbackQuery):
    editor_id = int(callback.data.split("_")[-1])
    editor = await rq.get_editor_by_id(editor_id)

    if not editor:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    valid_emails = await vl.extract_valid_emails(editor.mailcontact)
    if not valid_emails:
        await callback.message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö email –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
        return

    await callback.message.answer(
        f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n <b>{editor.nameRU}</b>\n"
        f"Email: <code>{valid_emails[0]}</code> –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã?",
        parse_mode=ParseMode.HTML,
        reply_markup=await kb.confirmation_keyboard(editor_id, editor.nameRU)
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("add_editor_"))
async def add_editor_final(callback: CallbackQuery):
    editor_id = int(callback.data.split("_")[-1])
    editor = await rq.get_editor_by_id(editor_id)

    if not editor:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    success = await fu.add_editor_to_sheet(editor.mailcontact)
    if success:
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {editor.nameRU} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã!")
    else:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {editor.nameRU}")

    await callback.answer()


#======================================================================================================================
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–ø–æ—Ä—Ç–∞
@admin_router.callback_query(F.data == 'import_db')
async def import_db_handler(callback: CallbackQuery):
    users = await rq.get_all_users()
    if not users:
        await callback.message.answer("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    await callback.message.answer(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=await kb.all_users_keyboard(users)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.callback_query(F.data.startswith('export_user_'))
async def export_user_handler(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[-1])
    user = await rq.get_user_by_id(user_id)

    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON
    user_data = {
        "id": user.id,
        "name": user.name,
        "nameRU": user.nameRU,
        "nameEN": user.nameEN,
        "idn": user.idn,
        "mailcontact": user.mailcontact,
        "tel": user.tel,
        "role": user.role,
        "serials": [user.serial1, user.serial2, user.serial3],
        "photos": [user.photo1, user.photo2, user.photo3],
        "bild_settings": [
            {
                "os_type": setting.os_type,
                "raw_path": setting.raw_path,
                "folder_format": setting.folder_format
            }
            for setting in user.bild_settings
        ]
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É ExportDB
    filename = EXPORT_DIR / f"db_{user.nameEN}.json"

    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as file:
            await callback.message.answer_document(
                document=types.BufferedInputFile(
                    file.read(),
                    filename=f"db_{user.nameEN}.json"
                ),
                caption=f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n1. {user.nameRU}\n"
                        f"2. {user.role}"
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
@admin_router.callback_query(F.data == 'export_db')
async def export_db_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –ë–î")
    await state.set_state("wait_export_file")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∞–π–ª–∞
@admin_router.message(F.document, StateFilter('wait_export_file'))
async def handle_export_file(message: Message, bot: Bot, state: FSMContext):
    try:
        file = await bot.get_file(message.document.file_id)
        file_data = await bot.download_file(file.file_path)
        user_data = json.loads(file_data.read())

        new_user_data = await rq.create_item_from_data(user_data)
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {new_user_data['nameRU']}")

    except ValueError as e:
        await message.answer(f"‚ö†Ô∏è {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    await state.clear()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
#======================================================================================================================

#======================================================================================================================
# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü

class ScheduleStates(StatesGroup):
    waiting_file = State()
    waiting_project = State()
    waiting_sheet = State()
    confirming_write = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –∏ writer
schedule_parser = ScheduleParser()
sheet_writer = SheetWriter()


@admin_router.callback_query(F.data == "upload_schedule")
async def upload_schedule_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
    available_sheets = await sheet_writer.get_available_sheets()
    sheets_text = "\n".join(
        [f"‚Ä¢ {sheet}" for sheet in available_sheets]) if available_sheets else "‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤"

    await callback.message.answer(
        "üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤'\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx) –∏–ª–∏ CSV.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫:\n"
        "‚Ä¢ –í—Ä–µ–º—è\n‚Ä¢ –ú–µ—Å—Ç–æ\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ\n‚Ä¢ –°–ø–∏–∫–µ—Ä—ã\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –¢—Ä–µ–∫\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:\n{sheets_text}"
    )
    await state.set_state(ScheduleStates.waiting_file)


@admin_router.message(ScheduleStates.waiting_file, F.document)
async def handle_schedule_file(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    try:
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_data = await bot.download_file(file_path)

        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        success, parsed_data, message_text = await schedule_parser.parse_file(
            file_data, message.document.file_name
        )

        if not success:
            await message.answer(message_text)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
        await state.update_data({
            'parsed_data': parsed_data,
            'filename': message.document.file_name
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
        preview_text = await kb._generate_preview(parsed_data, message_text)
        await message.answer(preview_text)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        await message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n"
            "‚Ä¢ üÖ∞Ô∏è –ü—Ä–æ–µ–∫—Ç 1 - –∑–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 31\n"
            "‚Ä¢ üÖ±Ô∏è –ü—Ä–æ–µ–∫—Ç 2 - –∑–∞–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 112\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:",
            reply_markup=await kb._get_project_selection_keyboard()
        )
        await state.set_state(ScheduleStates.waiting_project)

    except Exception as e:
        logging.error(f"Error handling schedule file: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()


@admin_router.callback_query(ScheduleStates.waiting_project, F.data.in_(["project_1", "project_2", "custom_row"]))
async def handle_project_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        if callback.data == "project_1":
            start_row = 31
        elif callback.data == "project_2":
            start_row = 112
        else:  # custom_row
            await callback.message.answer(
                "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:"
            )
            await state.set_state(ScheduleStates.waiting_project)
            return

        await state.update_data({'start_row': start_row})

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        available_sheets = await sheet_writer.get_available_sheets()

        if available_sheets:
            await callback.message.answer(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=await kb._get_sheet_selection_keyboard(available_sheets)
            )
            await state.set_state(ScheduleStates.waiting_sheet)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await state.update_data({'sheet_name': '–¢–µ–∫—É—â–µ–µ'})
            await _show_confirmation(callback.message, state)
            await state.set_state(ScheduleStates.confirming_write)

    except Exception as e:
        logging.error(f"Error in handle_project_selection: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@admin_router.message(ScheduleStates.waiting_project)
async def handle_custom_row(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
    try:
        start_row = int(message.text.strip())

        if start_row < 1:
            await message.answer("‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return

        await state.update_data({'start_row': start_row})

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        available_sheets = await sheet_writer.get_available_sheets()

        if available_sheets:
            await message.answer(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö:",
                reply_markup=await kb._get_sheet_selection_keyboard(available_sheets)
            )
            await state.set_state(ScheduleStates.waiting_sheet)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await state.update_data({'sheet_name': '–¢–µ–∫—É—â–µ–µ'})
            await _show_confirmation(message, state)
            await state.set_state(ScheduleStates.confirming_write)

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@admin_router.callback_query(ScheduleStates.waiting_sheet, F.data.startswith("sheet_"))
async def handle_sheet_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
    try:
        sheet_name = callback.data.replace("sheet_", "")
        await state.update_data({'sheet_name': sheet_name})
        await _show_confirmation(callback.message, state)
        await state.set_state(ScheduleStates.confirming_write)

    except Exception as e:
        logging.error(f"Error in handle_sheet_selection: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


async def _show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    data = await state.get_data()
    parsed_data = data.get('parsed_data', [])
    start_row = data.get('start_row')
    sheet_name = data.get('sheet_name', '–¢–µ–∫—É—â–µ–µ')

    if not parsed_data or not start_row:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return

    end_row = start_row + len(parsed_data) - 1
    await message.answer(
        f"üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
        f"‚Ä¢ –¢–∞–±–ª–∏—Ü–∞: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
        f"‚Ä¢ –õ–∏—Å—Ç: {sheet_name}\n"
        f"‚Ä¢ –§–∞–π–ª: {data.get('filename', 'N/A')}\n"
        f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {len(parsed_data)}\n"
        f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: —Å—Ç—Ä–æ–∫–∏ {start_row}-{end_row}\n"
        f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∏: A-F (–í—Ä–µ–º—è, –ú–µ—Å—Ç–æ, –ù–∞–∑–≤–∞–Ω–∏–µ, –°–ø–∏–∫–µ—Ä—ã, –û–ø–∏—Å–∞–Ω–∏–µ, –¢—Ä–µ–∫)\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=await kb._get_confirmation_keyboard()
    )


@admin_router.callback_query(ScheduleStates.confirming_write, F.data.in_(["confirm_write", "cancel_write"]))
async def handle_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        if callback.data == "cancel_write":
            await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
            await state.clear()
            return

        data = await state.get_data()
        parsed_data = data.get('parsed_data', [])
        start_row = data.get('start_row')
        sheet_name = data.get('sheet_name', '–¢–µ–∫—É—â–µ–µ')

        if not parsed_data or not start_row:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await callback.message.edit_text("‚è≥ –ó–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É...")

        success, result_message = await sheet_writer.write_schedule_data(
            parsed_data, start_row, sheet_name
        )

        if success:
            await callback.message.answer(f"‚úÖ {result_message}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if parsed_data:
                sample_text = "–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                for i, event in enumerate(parsed_data[:3]):
                    time = event.get('–í—Ä–µ–º—è', '')[:20] + "..." if len(event.get('–í—Ä–µ–º—è', '')) > 20 else event.get(
                        '–í—Ä–µ–º—è', '')
                    name = event.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')[:30] + "..." if len(event.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')) > 30 else event.get(
                        '–ù–∞–∑–≤–∞–Ω–∏–µ', '')
                    sample_text += f"\n{i + 1}. ‚è∞ {time}\n   üìù {name}"
                await callback.message.answer(sample_text)
        else:
            await callback.message.answer(f"‚ùå {result_message}")

        await state.clear()

    except Exception as e:
        logging.error(f"Error in handle_confirmation: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await state.clear()

# –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –∫–æ–Ω–µ—Ü
#======================================================================================================================

