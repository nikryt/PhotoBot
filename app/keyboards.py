from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞ –Ω–µ –≤—Å–µ –¥–ª—è —Ä–∞–±–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –ë–î
from app.database.requests import get_roles
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
#–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
from Texts import (Buttons)

import app.database.requests as rq

main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text=Buttons.FIO)],
    [KeyboardButton(text=Buttons.CONTACTS)],
    [KeyboardButton(text=Buttons.PHOTO),
    KeyboardButton(text=Buttons.CHECK)]],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—Å—è...')

getphoto = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=Buttons.FINISH_UPLOAD,)]],
                            resize_keyboard=True)

back_cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.BACK, callback_data='back'),
    InlineKeyboardButton(text=Buttons.CANCEL, callback_data='cancel')]
])

fio = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.RU, callback_data='ru')],
    [InlineKeyboardButton(text=Buttons.EN, callback_data='en')],
    [InlineKeyboardButton(text=Buttons.CHECK, callback_data='check')]])

get_tel = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text=Buttons.PHONE,
                    request_contact=True)]],
                    resize_keyboard=True, one_time_keyboard=True)

proverka = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.YES, callback_data='yes')],
    [InlineKeyboardButton(text=Buttons.NO, callback_data='no')]])

edit = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –∏–º—è RU', callback_data='RU')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–µ –∏–º—è EN', callback_data='EN')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω', callback_data='phone')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã', callback_data='idn')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contact')],
    [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å', callback_data='role')],
    [InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes')]])

cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.YES, callback_data='yes')],
    [InlineKeyboardButton(text=Buttons.NO, callback_data='no')]])

find = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.GENERAL, callback_data='general')],
    [InlineKeyboardButton(text=Buttons.ALL_TEXTS, callback_data='texts')],
    [InlineKeyboardButton(text=Buttons.ALL, callback_data='all'), InlineKeyboardButton(text=Buttons.DONE, callback_data='ready')],
    [InlineKeyboardButton(text=Buttons.ERROR, callback_data='clear'), InlineKeyboardButton(text=Buttons.NEW, callback_data='new')]
])


table = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=Buttons.MAIN, callback_data='main'), InlineKeyboardButton(text=Buttons.DIST, callback_data='–ø—É—Ç—å')]
])


    # ------------------------------------------------------------------------------------------------------------------
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞
    # ------------------------------------------------------------------------------------------------------------------

async def admin_keyboard(registration_enabled: bool) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(
            text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'ON' if registration_enabled else 'OFF'}",
            callback_data='toggle_registration'
        )],
        [InlineKeyboardButton(text="–ú–æ–∂–Ω–æ –≤—Å–µ—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data='view_all')],
        [InlineKeyboardButton(text="DeepSeek", callback_data='deepseek')],
        [InlineKeyboardButton(text="üë• –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤", callback_data='add_editors_list')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def admin_approval_kb(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"approve_{user_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"reject_{user_id}"
            )
        ]
    ])

async def editors_list_keyboard(editors: list[tuple]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤"""
    builder = InlineKeyboardBuilder()
    for editor_id, name_ru, _ in editors:
        builder.button(
            text=f"üë§ {name_ru}",
            callback_data=f"confirm_editor_{editor_id}"
        )
    builder.adjust(1)
    return builder.as_markup()

async def confirmation_keyboard(editor_id: int, name_ru: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.button(
        text=f"‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å {name_ru}",
        callback_data=f"add_editor_{editor_id}"
    )
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1)
    return builder.as_markup()

    # ------------------------------------------------------------------------------------------------------------------
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞
    # ------------------------------------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------------------------------------
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∏–ª–¥–∞
    # ------------------------------------------------------------------------------------------------------------------

async def os_select_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="Windows üñ•Ô∏è", callback_data="windows"),
        InlineKeyboardButton(text="MacOS üçè", callback_data="macos"),
        width=2
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_setup"),
        width=1
    )
    return builder.as_markup()

async def folder_format_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="1: –ß–∏—Å–ª–æ_–ú–µ—Å—è—Ü/–ù–∞–∑–≤–∞–Ω–∏–µ_–°—ä—ë–º–∫–∏", callback_data="format_1"),
        InlineKeyboardButton(text="2: –ß–∏—Å–ª–æ_–ú–µ—Å—è—Ü/–í—Ä–µ–º—è –ù–∞–∑–≤–∞–Ω–∏–µ_–°—ä—ë–º–∫–∏", callback_data="format_2"),
        InlineKeyboardButton(text="3: –ú–µ—Å—è—Ü/–ß–∏—Å–ª–æ/–ù–∞–∑–≤–∞–Ω–∏–µ_–°—ä—ë–º–∫–∏", callback_data="format_3"),
        width=1
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_setup"),
        width=1
    )
    return builder.as_markup()

async def settings_confirmation_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_settings"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_settings")
            ]
        ]
    )

    # ------------------------------------------------------------------------------------------------------------------
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–∏–ª–¥–∞
    # ------------------------------------------------------------------------------------------------------------------

    # ------------------------------------------------------------------------------------------------------------------
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    # ------------------------------------------------------------------------------------------------------------------


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ—è–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def roles():
    all_roles = await get_roles()
    keyboard = InlineKeyboardBuilder()
# –î–æ—Å—Ç–∞–ª–∏ –≤—Å–µ —Ä–æ–ª–∏ –∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º –∏—Ö
    for role in all_roles:
#       –ü–µ—Ä–µ–¥–∞—á–∞ –≤ callback_data roles_1-2-3-4...
#       keyboard.add(InlineKeyboardButton(text=role.name, callback_data=f"roles_{role.id}"))
        keyboard.add(InlineKeyboardButton(text=role.name, callback_data=f"role_{role.id}"))
        # print(InlineKeyboardButton(text=role.name, callback_data=role.name))
    return keyboard.adjust(2).as_markup()


# –ö–Ω–æ–ø–∫–∞ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–µ—Å—Ç–∞ –≥–¥–µ –µ—ë –≤—ã–∑—ã–≤–∞—é—Ç
async def edit_item(
        *,
        btns: dict[str, str],
        sizes: tuple[int] = (2,)):

        keydoard = InlineKeyboardBuilder()

        for text, data in btns.items():
            keydoard.add(InlineKeyboardButton(text=text, callback_data=data))
        return keydoard.adjust(*sizes).as_markup()


# async def create_task_keyboard(row: int, col: int, code: str) -> InlineKeyboardMarkup:
#     """
#     –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
#     :param row: –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
#     :param col: –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
#     """
#     builder = InlineKeyboardBuilder()
#     builder.button(text=Buttons.DONE, callback_data=f"done:{row}:{col}")
#     builder.button(text=Buttons.CANCEL, callback_data=f"cancel:{row}:{col}")
#     builder.button(text=Buttons.CODE.format(code), callback_data=f"code:{row}:{col}")
#     builder.button(text=Buttons.ERROR, callback_data=f"error:{row}:{col}")
#
#     # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç—Ä–µ—Ç—å—è ‚Äî –≤ –¥—Ä—É–≥–æ–π
#     builder.adjust(2, 1, 1)
#     return builder.as_markup()

# –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—ä–µ–º–∫–∏.
async def create_task_keyboard(row: int, col: int, code: str, message_id: int) -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ–º message_id –≤ callback data"""
    builder = InlineKeyboardBuilder()
    # builder.button(text=Buttons., callback_data=f"done:{row}:{col}:{message_id}")
    builder.button(text=Buttons.DONE, callback_data=f"done:{row}:{col}:{code}:{message_id}")
    builder.button(text=Buttons.CODE.format(code), callback_data=f"code:{row}:{col}:{code}:{message_id}")
    builder.button(text=Buttons.CANCEL, callback_data=f"cancel:{row}:{col}:{code}:{message_id}")
    builder.button(text=Buttons.ERROR, callback_data=f"error:{row}:{col}:{code}:{message_id}")
    builder.adjust(1, 1, 2)
    return builder.as_markup()

async def status_done_error(row: int, col: int, code: str, message_id: int) -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ–º message_id –≤ callback data"""
    builder = InlineKeyboardBuilder()
    builder.button(text=Buttons.DONE, callback_data=f"done:{row}:{col}:{code}:{message_id}")
    builder.button(text=Buttons.ERROR, callback_data=f"error:{row}:{col}:{code}:{message_id}")
    builder.adjust( 1, 1)
    return builder.as_markup()



# edit_item = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')],
#     [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit')]])

# –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ –±–æ—Ç–∞:

async def create_keyboard(
    *btns: str,
    placeholder: str = None,
    request_contact: int = None,
    request_location: int = None,
    sizes: tuple[int] = (2,),
):
    '''
    Parameters request_contact and request_location must be as indexes of btns args for buttons you need.
    Example:
    get_keyboard(
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            request_contact=4,
            sizes=(2, 2, 1)
        )
    '''
    keyboard = ReplyKeyboardBuilder()

    for index, text in enumerate(btns, start=0):

        if request_contact and request_contact == index:
            keyboard.add(KeyboardButton(text=text, request_contact=True))

        elif request_location and request_location == index:
            keyboard.add(KeyboardButton(text=text, request_location=True))
        else:

            keyboard.add(KeyboardButton(text=text))

    return keyboard.adjust(*sizes).as_markup(
            resize_keyboard=True, input_field_placeholder=placeholder)



# # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
# async def get_role_keyboard(role: str) -> ReplyKeyboardMarkup:
#     if role == "–§–æ—Ç–æ–≥—Ä–∞—Ñ":
#         return ReplyKeyboardMarkup(
#             keyboard=[
#                 [KeyboardButton(text="—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
#                 [KeyboardButton(text="üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
#                 [KeyboardButton(text="üìã –ú–æ–∏ —Å–µ—Ä–∏–π–Ω–∏–∫–∏")]
#             ],
#             resize_keyboard=True
#         )
#     elif role == "–ë–∏–ª–¥-—Ä–µ–¥–∞–∫—Ç–æ—Ä":
#         return ReplyKeyboardMarkup(
#             keyboard=[
#                 [KeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü—ã")],
#                 [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞")],
#                 [KeyboardButton(text="üìÇ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã")]
#             ],
#             resize_keyboard=True
#         )
#     return main  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
async def get_role_keyboard(role: str) -> InlineKeyboardMarkup:
    if role == "–§–æ—Ç–æ–≥—Ä–∞—Ñ":
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì∏ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_pers")],
                [InlineKeyboardButton(text="üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")],
                [InlineKeyboardButton(text="üìã –ú–æ–∏ —Å–µ—Ä–∏–π–Ω–∏–∫–∏", callback_data="my_serials")]
            ]
        )
    elif role == "–ë–∏–ª–¥-—Ä–µ–¥–∞–∫—Ç–æ—Ä":
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ Day", callback_data="tables_day"), InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –ø—É—Ç—å", callback_data="tables_dist")],
                [InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –§–æ—Ç–æ", callback_data="tables_shedule")],
                [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å PhotoMechanic", callback_data="PM_data")],
                [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞", callback_data="search_code")],
                [InlineKeyboardButton(text="üìÇ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã", callback_data="all_photographers")]
            ]
        )
    elif role == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –§–æ—Ç–æ", callback_data="tables_photo"), InlineKeyboardButton(text="üìä –¢–∞–±–ª–∏—Ü–∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="tables_shedule")],
                [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞", callback_data="search_code")],
                [InlineKeyboardButton(text="üìÇ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã", callback_data="all_photographers")]
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=[])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é, –µ—Å–ª–∏ –µ—Å—Ç—å

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤
async def photographers_keyboard():
    photographers = await rq.get_all_photographers()
    builder = InlineKeyboardBuilder()

    for idn, nameRU in photographers:
        builder.button(
            text=nameRU,
            callback_data=f"photographer_{idn}"
        )

    builder.adjust(1)
    return builder.as_markup()