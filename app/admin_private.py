from aiogram import F, Router, types, Bot
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.Filters.chat_types import ChatTypeFilter, IsAdmin  # –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
from app.generate import ai_generate
from app.handlers import Gen, save_document

import app.keyboards as kb
import app.database.requests as rq
import app.Sheets.function as fu
import app.Utils.validators as vl


admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

@admin_router.message(Command("admin"))
async def admin_keyboard(message: types.Message):
    status = await rq.get_registration_status()
    await message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=await kb.admin_keyboard(status)
    )


#=======================================================================================================================
# START –ü–æ–ª—É—á–∏—Ç—å ID –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
#=======================================================================================================================

# –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ñ–æ—Ç–æ –µ–≥–æ ID
@admin_router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')

# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –µ–≥–æ ID
@admin_router.message(F.document)
async def get_document(message: Message):
    await message.answer(f'ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {message.document.file_id}')

async def process_document(message: types.Message, bot: Bot):
    await save_document(message, bot)


# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä –µ–≥–æ ID –∏ ID —á–∞—Ç–∞
@admin_router.message(F.sticker)
async def check_sticker(message: Message):
    await message.answer(f'ID —Å—Ç–∏–∫–µ—Ä–∞: {message.sticker.file_id}')
    await message.answer(f'id —á–∞—Ç–∞: {message.from_user.id, message.chat.id}')

#=======================================================================================================================
# END –ü–æ–ª—É—á–∏—Ç—å ID –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
#=======================================================================================================================



#–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
@admin_router.message(F.text == "–ú–æ–∂–Ω–æ –≤—Å–µ—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def view_all_items(message: types.Message):
    for item in await rq.get_item():
        try:
            await message.answer_document(document=item.serial1,
                                          caption=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                                  f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                                  f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                                  f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                                  f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                                  f'ü™Ü –†–æ–ª—å: {item.role}',
                                          protect_content=True,
                                          reply_markup=await kb.edit_item(btns={
                                              '–£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                              '–ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'})
                                          )
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))

        except TelegramBadRequest:
            await message.answer(text=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                      f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                      f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                      f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                      f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                      f'ü™Ü –†–æ–ª—å: {item.role}',
                                 protect_content=True,
                                 message_effect_id="5046589136895476101",
                                 reply_markup=await kb.edit_item(btns={
                                     'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                     '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'}))
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await fu.number_row(item)
            # await fu.sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))

    await message.answer("–í–æ—Ç –≤—Å–µ, –ª—é–±—É–π—Å—è")

#–õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—é
@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_item(callback: CallbackQuery):
    item_id = callback.data.split("_")[-1]
    await  rq.del_item(int(item_id))
    await callback.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')
    await callback.message.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')



#=======================================================================================================================
# DeepSeek
#=======================================================================================================================
@admin_router.message(F.text == "–ø–æ–≥–æ–≤–æ—Ä–∏", )
async def deepseek(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?')
    await state.set_state(Gen.result)

@admin_router.message(Gen.result)
async def generating(message: Message, state: FSMContext):
    await state.set_state(Gen.wait)
    responses = await ai_generate(message.text)
    await message.answer(responses)
    await state.clear()

@admin_router.message(Gen.wait)
async def stop_flood(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏ —Ç—ã, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, —ç–π!')
#=======================================================================================================================
# DeepSeek
#=======================================================================================================================



#=======================================================================================================================
# START –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#=======================================================================================================================
@admin_router.callback_query(F.data == 'toggle_registration')
async def toggle_registration(callback: CallbackQuery):
    current_status = await rq.get_registration_status()
    new_status = not current_status
    await rq.set_registration_status(new_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=await kb.admin_keyboard(new_status)
    )
    await callback.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if new_status else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}!")
#=======================================================================================================================
# END –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#=======================================================================================================================

#=======================================================================================================================
# START –ü—Ä–∞–≤–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#=======================================================================================================================
@admin_router.callback_query(F.data == "add_editors_list")
async def show_editors_list(callback: CallbackQuery):
    editors = await rq.get_editors()

    if not editors:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã:",
        reply_markup=await kb.editors_list_keyboard(editors)
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("confirm_editor_"))
async def confirm_editor(callback: CallbackQuery):
    editor_id = int(callback.data.split("_")[-1])
    editor = await rq.get_editor_by_id(editor_id)

    if not editor:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    valid_emails = vl.extract_valid_emails(editor.mailcontact)
    if not valid_emails:
        await callback.message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö email –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
        return

    await callback.message.answer(
        f"–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n <b>{editor.nameRU}</b>\n"
        f"Email: <code>{valid_emails[0]}</code> –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã?",
        parse_mode=ParseMode.HTML,
        reply_markup=await kb.confirmation_keyboard(editor_id, editor.nameRU)
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("add_editor_"))
async def add_editor_final(callback: CallbackQuery):
    editor_id = int(callback.data.split("_")[-1])
    editor = await rq.get_editor_by_id(editor_id)

    if not editor:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    success = await fu.add_editor_to_sheet(editor.mailcontact)
    if success:
        await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {editor.nameRU} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã!")
    else:
        await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {editor.nameRU}")

    await callback.answer()