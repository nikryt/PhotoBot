# from email.policy import default
# from sys import exception
from http.client import responses

import phonenumbers
from sqlalchemy.orm import defer

import Texts
import os
import re
import asyncio

from phonenumbers import NumberParseException, PhoneNumberFormat
from aiogram import F, Router, types, Bot
# from aiogram.client.default import Default
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, ReplyKeyboardRemove, Update
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
# from aiogram.methods import SendMessage, ForwardMessage
from aiogram.enums import ContentType, ChatAction
from aiogram.enums import ParseMode
#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from Texts import Messages, Buttons, StatesText
from app.generate import ai_generate



import app.keyboards as kb
import app.database.requests as rq
import app.Sheets.function as fu
import app.SerialNumber as sn

from aiogram.utils.formatting import PhoneNumber
from app.database.requests import get_item
from requests import session

#from aiohttp.web_fileresponse import content_type
#from google.auth import message

#–û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ router Router
router = Router()

class StartState(StatesGroup):
    active = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è


class Register(StatesGroup):
    last_bot_message_id = State()
    tg_id = State()
    nameRu = State()
    nameEn = State()
    idn = State()
    mailcontact = State()
    tel = State()
    role = State()
    photofile1 = State()
    photofile2 = State()
    photofile3 = State()
    serial1 = State()
    serial2 = State()
    serial3 = State()
    verefy = State()
    nameRu2 = State()
    nameEn2 = State()
    idn2 = State()
    mailcontact2 = State()
    tel2 = State()
    role2 = State()
    texts = StatesText.REGISTER

class Gen(StatesGroup):
    wait = State()
    result = State()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
# last_bot_message_id = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit = None

@router.message(CommandStart())
# –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è cmd_start –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –æ–±—ä–µ–∫—Ç Massage
async def cmd_start(message: Message, state: FSMContext, bot: Bot,):
# –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ cmd_start –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ—Ç–æ–¥—É answer, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.answer('–ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.main)
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É main
#     await  state.clear()
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    await asyncio.sleep(1)
    await state.set_state(StartState.active)
    await message.answer_photo(photo='AgACAgIAAxkBAAPgZ361se9D_xn8AwRI7Y1gBmdmTiwAAgfrMRsQmvlLUMXQ9_Z9HXABAAMCAAN5AAM2BA',
                               caption=Messages.START.format(name=message.from_user.full_name)
                               # reply_markup=kb.main)
    )
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    await asyncio.sleep(3)
    await message.answer(text=Messages.INTRO, parse_mode=ParseMode.HTML)

# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä –ø–æ –µ–≥–æ ID
#     await message.reply_sticker(sticker='CAACAgIAAxkBAAPYZ36b1AUNHQg55cEEfzilVTX1lCYAArkRAAJClVFLVmGP6JmH07A2BA', reply_markup=ReplyKeyboardRemove())
# –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ò–º—è –∏–∑ —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#    await message.reply(f'–ü—Ä–∏–≤–µ—Ç :) \n–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}\n'
#                        f'–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n–ù–∏–∫: @{message.from_user.username}')
# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è —Å –µ–≥–æ id
    await rq.set_user(message.from_user.id)
#   await message.reply('–ö–∞–∫ –¥–µ–ª–∞?')

@router.message(Command('help'))
async def  cmd_help(message: Message):
    await message.answer('–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏, –æ–Ω –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üò¥üò±üòúüòÇüòù')

@router.message(StateFilter('*'), Command('register'))
async def register(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await send_typing_and_message(
        message.chat.id, bot,
        f'‚úÖ –ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n',
        state, reply_markup=ReplyKeyboardRemove()
    )
    await send_typing_and_message(
        message.chat.id, bot,
        f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
        state
    )


    # await message.answer('–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
    # await asyncio.sleep(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    # await state.update_data(message_history=[])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    # msg = await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ', reply_markup=ReplyKeyboardRemove())
    # await state.update_data(message_history=[msg.message_id])
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    await state.set_state(Register.nameRu)

#-----------------------------------------------------------------------------------------------------------------------
#–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#-----------------------------------------------------------------------------------------------------------------------

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è StartState
@router.message(StateFilter(StartState.active), ~F.command)
async def handle_start_state(message: types.Message, bot: Bot):
    if not message.text or not message.text.startswith('/'):
    # """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            notify = await message.answer("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã!")
            await asyncio.sleep(3)
            await notify.delete()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
# @router.message()
# async def handle_other_messages(message: types.Message, bot: Bot):
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
#     if not message.text.startswith('/'):
#         await asyncio.sleep(1)
#         await delete_message_safe(message.chat.id, message.message_id, bot)
#         msg = await message.answer("‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∫–æ–º–∞–Ω–¥—ã")
#         await asyncio.sleep(2)
#         await msg.delete()
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –í –ê–ö–¢–ò–í–ù–û–ú –¥–∏–∞–ª–æ–≥–µ
# @router.message(StateFilter(None))
# async def handle_dialog(message: Message, state: FSMContext, bot: Bot):
#     # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ registered
#     await message.delete()
#     # ... –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ...
#     await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
async  def mes_user_history(message: Message, state: FSMContext):
    data = await state.get_data()
    message_history = data.get('message_history', [])
    message_history.append(message.message_id)
    await state.update_data(message_history=message_history)
    print(f'–Æ–∑–µ—Ä: {message_history}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message_safe(chat_id: int, message_id: int, bot: Bot):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await asyncio.sleep(0.3)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def delete_all_previous_messages(chat_id: int, state: FSMContext, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    data = await state.get_data()
    messages_to_delete = data.get("message_history", [])
    print(messages_to_delete)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    for msg_id in messages_to_delete:
        await delete_message_safe(chat_id, msg_id, bot)
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(message_history=[])

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è State —Å –≤–Ω–µ—Å–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é.
async def send_typing_and_message(chat_id: int, bot: Bot, text: str, state: FSMContext = None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏."""
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏
    message = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    # if state:
    #     await state.update_data(message_history=[message.message_id])
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if state:
        data = await state.get_data()
        message_history = data.get('message_history', [])
        message_history.append(message.message_id)
        await state.update_data(message_history=message_history)
        print(message_history)
    return message



# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞
async def format_phone(phone: str) -> str:
    try:
        parsed = phonenumbers.parse(phone, "RU")
        if phonenumbers.is_valid_number(parsed):
            return phonenumbers.format_number(parsed, PhoneNumberFormat.E164)
        return None
    except NumberParseException:
        return None

#–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
async def get_initials(nameEn: str) -> str:
    return ''.join([part[0].upper() for part in nameEn.split() if part])

#–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
async def transliterate_russian_to_eng(name_ru: str) -> str:
    """
    –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –§–ò–û –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –†–§.
    –ü—Ä–∏–º–µ—Ä: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á' ‚Üí 'Ivanov Ivan Ivanovich'
    """
    translit_dict = Texts.Translit_EN.EN
    translated = []
    for part in name_ru.split():
        translit_part = []
        for char in part:
            translit_part.append(translit_dict.get(char, char))

        # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
        formatted_part = ''.join(translit_part)
        if formatted_part:
            formatted_part = formatted_part[0].upper() + formatted_part[1:].lower()
        translated.append(formatted_part)

    return ' '.join(translated)

#–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –§–ò–û
async def registr_fio(name_ru: str) -> str:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
    translated = []
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
    for part in name_ru.split():
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–µ)
        formatted_part = part.strip().capitalize()
        if formatted_part:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            translated.append(formatted_part)

    return " ".join(translated) if translated else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ –∏–º—è"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ñ–æ—Ç–æ)
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
media_groups_cache = {}

async def process_documents(documents: list, username: int, bot: Bot) -> list:
    user_dir = f"downloads/{username}"
    os.makedirs(user_dir, exist_ok=True)
    saved_files = []
    for doc in documents:
        file_id = doc["file_id"]
        file_name = doc["file_name"] or f"file_{file_id[:6]}"
        file = await bot.get_file(file_id)
        file_path = f"{user_dir}/{file_name}"
        await bot.download_file(file.file_path, file_path)
        saved_files.append(file_path)

    return saved_files


#-----------------------------------------------------------------------------------------------------------------------
#–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#-----------------------------------------------------------------------------------------------------------------------


@router.message(F.photo)
async def forward_message(message: Message, bot: Bot):
    await bot.forward_message('-1002378314584', message.from_user.id, message.message_id)
    await message.answer(Messages.PHOTO)
# @router.message(F.document)
# async def forward_message(message: Message, bot: Bot):
#     await bot.forward_message('-1002378314584', message.from_user.id, message.message_id)
#     await message.answer('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.')

# –ü–æ–ª—É—á–∏—Ç—å ID –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö
# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å—Ç–∏–∫–µ—Ä –µ–≥–æ ID –∏ ID —á–∞—Ç–∞
# @router.message(F.sticker)
# async def check_sticker(message: Message):
#     await message.answer(f'ID —Å—Ç–∏–∫–µ—Ä–∞: {message.sticker.file_id}')
#     await message.answer(f'id —á–∞—Ç–∞: {message.from_user.id, message.chat.id}')


# # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ñ–æ—Ç–æ –µ–≥–æ ID
# @router.message(F.photo)
# async def get_photo(message: Message):
#     await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')

# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –µ–≥–æ ID
# @router.message(F.document)
# async def get_document(message: Message):
#     await message.answer(f'ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {message.document.file_id}')

# async def process_document(message: types.Message, bot: Bot):
#     await save_document(message, bot)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ Download. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è 3 —Ä–∞–∑–∞ –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
async def save_document(message: types.Message, bot: Bot):
    document = message.document
    file_id = document.file_id  # –ü–æ–ª—É—á–∞–µ–º id –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_name = document.file_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    sender_name = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file = await bot.get_file(file_id)
    file_path = file.file_path
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–∏–∫–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    os.makedirs(f'downloads/{sender_name}', exist_ok=True)
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, f'downloads/{sender_name}/{file_name}')
    # await sn.main(message)
    # await message.answer('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

# –û—Ç–¥–µ–ª—å–Ω—ã–π –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
# @router.message(F.document)
# async def process_document(message: types.Message, bot: Bot):
#     await save_document(message, bot)

# @router.message(F.text == '–§–ò–û')
# async def fio(message: Message):
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=kb.fio)

@router.callback_query(F.data == 'ru')
async  def fio(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.', show_alert=True)
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.')

# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == 'cancel')
async def cancel_heandler(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    message = callback.message
    current_state = await  state.get_state()
    if current_state is None:
        return
    await state.clear()
    await callback.message.answer("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=kb.main)
    await delete_all_previous_messages(message.chat.id, state, bot)


@router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_heandler_text(message: types.Message, state: FSMContext, bot: Bot) -> None:
    current_state = await  state.get_state()
    if current_state is None:
        return
    await state.clear()
    await delete_all_previous_messages(message.chat.id, state, bot)
    await message.answer("–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=kb.main)



# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –ø–æ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == 'back')
@router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def cancel_heandler(message: types.Message, state: FSMContext) -> None:

    current_state = await  state.get_state()
    # print(current_state)
    if current_state == Register.nameRu:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.\n–í–≤–µ–¥–∏—Ç–µ  –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    if current_state == Register.mailcontact:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –§–ò–û.\n–í–≤–µ–¥–∏—Ç–µ  –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.nameRu)
        return
    if current_state == Register.tel:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ  –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.mailcontact)
        return
    if current_state == Register.role:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ  —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.tel)
        return
    if current_state == Register.photofile1:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–æ–≤—å –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".')
        await state.set_state(Register.role)
        return
    if current_state == Register.photofile2:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n —Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile1)
        return
    if current_state == Register.photofile3:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile2)
        return
    if current_state == Register.verefy:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ—Ç—å–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–µ—Ç—å–µ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile3)
        return

    previous = None
    for step in Register.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await  message.answer(f'–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {Register.texts[previous.state]}')
            return
        previous = step


# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

#–¢–µ—Å—Ç–∏—Ä—É—é —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–∏–ª –ø—Ä–æ—à–ª—É—é –≤–µ—Ä—Å–∏—é
# @router.message(StateFilter(None), Command('register'))
# async def register(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer('–ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
#     await asyncio.sleep(1)
#     await state.set_state(Register.nameRu)
#     new_message = await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ', reply_markup=ReplyKeyboardRemove())
#     await state.update_data(last_bot_message_id=new_message.message_id)

# @router.message(DialogState.active)
# async def handle_dialog(message: types.Message, state: FSMContext):
#     # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
#     data = await state.get_data()
#     history = data["message_history"] + [message.message_id]
#
#     # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     await delete_all_previous_messages(message.chat.id, state)
#     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏
#     await bot.send_chat_action(message.chat.id, ChatActions.TYPING)
#     await asyncio.sleep(1)
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
#     new_msg = await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {message.text}")
#     # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞
#     await state.update_data(message_history=[new_msg.message_id])


@router.message(Register.nameRu)
async def register_nameRu(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\-\' ]+$", message.text):
        return await send_typing_and_message(
            message.chat.id, bot,
            "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è",
            state)
    else:
        nameRu = await registr_fio(message.text)
        nameEn = await transliterate_russian_to_eng(message.text)
        initials = await get_initials(nameEn)
        await state.update_data(
            nameRu=nameRu,
            tg_id=message.from_user.id,
            nameEn=nameEn,
            idn=initials,
        )
        # # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        # data = await state.get_data()
        # history = data["message_history"] + [message.message_id]
        # print(data)

             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏
        # await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        # await asyncio.sleep(2)
        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        # new_msg = await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {message.text}")
        # # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞
        # await state.update_data(message_history=[new_msg.message_id])

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è"
        # await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        # await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏

        # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_all_previous_messages(message.chat.id, state, bot)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {nameRu}\n\n"
            f"ü™™ –í–∞—à–µ –∏–º—è RU: {nameRu}\n"
            f"ü™™ –í–∞—à–µ –∏–º—è EN: {nameEn}\n"
            f"ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {initials}\n\n"
            f"üì´ –í–≤–µ–¥–∏—Ç–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (–ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏):",
            state, reply_markup=kb.back_cancel
        )
        await state.set_state(Register.mailcontact)

#–¢–µ—Å—Ç–∏—Ä—É—é —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Å—Ç–∞–≤–∏–ª –ø—Ä–æ—à–ª—É—é –≤–µ—Ä—Å–∏—é
# @router.message(Register.nameRu)
# async def register_nameRu(message: Message, state: FSMContext, bot: Bot):
#     if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\-\' ]+$", message.text):
#         return await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –≤–≤–µ–¥—Ç–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è")
#     else:
#         nameRu = await registr_fio(message.text)
#         nameEn = await transliterate_russian_to_eng(message.text)
#         initials = await get_initials(nameEn)
#         await state.update_data(nameRu=nameRu, tg_id=message.from_user.id, nameEn=nameEn, idn=initials)
#         data = await state.get_data()
#         last_bot_message_id = data.get("last_bot_message_id")
#         if last_bot_message_id:
#             await delete_message_safe(message.chat.id, last_bot_message_id, bot)
#         # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         await delete_message_safe(message.chat.id, message.message_id, bot)
#         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è"
#         await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
#         await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         new_message = await message.answer(
#             f'–í–∞—à–µ –∏–º—è RU: {nameRu}\n'
#             f'–í–∞—à–µ –∏–º—è EN: {nameEn}\n'
#             f'–í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {initials}\n\n'
#             f'–í–≤–µ–¥–∏—Ç–µ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã  –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏'
#         )
#         # –û–±–Ω–æ–≤–ª—è–µ–º message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#         await state.update_data(last_bot_message_id=new_message.message_id)
#         await state.set_state(Register.mailcontact)
#

#-----------------------------------------------------------------------------------------------------------------------
# @router.message(Register.nameEn)
# async def register_nameEN(message: Message, state: FSMContext):
#     await state.update_data(nameEn=message.text)
#     await state.set_state(Register.idn)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –≤–æ—Ç —Ç–∞–∫ KNA')
#
#
# @router.message(Register.idn)
# async def register_idn(message: Message, state: FSMContext):
#     # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
#     clean_idn = re.sub(r'[^A-Za-z]', '', message.text).upper()
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
#     if len(clean_idn) != 3:
#         await message.answer(
#             "‚ùå ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.\n"
#             "–ü—Ä–∏–º–µ—Ä: KNA\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
#         )
#         return  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Register.idn
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#     await state.update_data(idn=clean_idn)
#     await state.set_state(Register.mailcontact)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã  –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏')
#-----------------------------------------------------------------------------------------------------------------------

@router.message(Register.mailcontact)
async def register_mailcontact(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    await state.update_data(mailcontact=message.text)

    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await delete_message_safe(message.chat.id, message.message_id, bot)
    # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è"
    # await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    # await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    await send_typing_and_message(
        message.chat.id, bot,
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {message.text}\n\n"
        f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
        f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
        f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
        f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n\n'
        f'‚òéÔ∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –¢–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
        state, reply_markup=kb.get_tel
    )
    await state.set_state(Register.tel)


# @router.message(Register.tel, F.contact)
# async def get_contact(message: Message, state: FSMContext):
#     phone = message.contact.phone_number
#     await message.answer(f"–ù–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone}", reply_markup=types.ReplyKeyboardRemove())
#     await state.update_data(tel=phone)
#     await state.set_state(Register.role)
#     await message.answer('–°–ø–∞—Å–∏–±–æ',reply_markup=ReplyKeyboardRemove())
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä', reply_markup=await kb.roles())
#
# @router.message(Register.tel, F.text)
# async def validate_phone(message: Message):
#     # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
#     phone = re.sub(r'[^\d]', '', message.text)
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
#     if len(phone) == 10:
#         phone = f'7{phone}'
#     elif len(phone) == 11 and phone.startswith(('7', '8')):
#         phone = f'7{phone[1:]}'
#
#     if re.match(PHONE_REGEX, message.text) and len(phone) == 12:
#         await message.answer(f"–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä: +{phone}", reply_markup=types.ReplyKeyboardRemove())
#     else:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É:",
#                              reply_markup=kb.get_tel)

@router.message(Register.tel, F.contact)
async def register_tel(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    phone = message.contact.phone_number
    global edit

    if phone and edit !=1:
        data = await state.get_data()
        await delete_all_previous_messages(message.chat.id, state, bot)
        # await message.answer(f"–ù–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone}", reply_markup=types.ReplyKeyboardRemove())
        await state.update_data(tel=phone)
        await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {phone}\n\n"
            f'–í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
            f'–í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
            f'–í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'–í–∞—à–∏ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'–í–∞—à –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ {phone}\n\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä',
            state, reply_markup=await kb.roles()
        )
        await state.set_state(Register.role)
    if phone and edit == 1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=phone)
        data = await state.get_data()
        await send_typing_and_message(
            message.chat.id, bot,
            f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n'
            f'–í–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n'
            f'‚òéÔ∏è {data["tel"]}',
            state, reply_markup=kb.getphoto
        )
        await state.set_state(Register.verefy)
        edit = 0




@router.message(Register.tel, F.text)
async def validate_phone(message: Message, state: FSMContext, bot: Bot):
    global edit
    await mes_user_history(message, state)
    formatted = await format_phone(message.text)
    data = await state.get_data()
    if formatted and edit !=1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=formatted)
        # await message.answer(f"–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä: {formatted}", reply_markup=ReplyKeyboardRemove())
        await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {formatted}\n\n"
            f'–í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
            f'–í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
            f'–í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'–í–∞—à–∏ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'–í–∞—à –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ {formatted}\n\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä',
            state, reply_markup=await kb.roles()
        )
        await state.set_state(Register.role)
    elif formatted and edit == 1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=formatted)
        await state.set_state(Register.verefy)
        await send_typing_and_message(
            message.chat.id, bot,
            f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n'
            f'–í–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n'
            f'‚òéÔ∏è {formatted}',
            state, reply_markup=kb.getphoto
        )
        edit = 0
    else:
        await send_typing_and_message(
            message.chat.id, bot,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞", state, reply_markup=kb.get_tel)
    # else:
    #     await message.answer(f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n'
    #                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.get_tel)


#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ
@router.callback_query(Register.role, F.data != '–§–æ—Ç–æ–≥—Ä–∞—Ñ')
async def select_rol(callback_query: types.CallbackQuery, state: FSMContext,  bot: Bot):
    message = callback_query.message
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    #—É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    # await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.update_data(role=callback_query.data,
                            photofile1='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile2='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile3='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                            serial1='NoSerial', serial2='NoSerial', serial3='NoSerial'
                            )
    data = await state.get_data()
    await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {callback_query.data}\n\n"
            f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
            f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
            f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'‚òéÔ∏è –í–∞—à –Ω–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞ {data["tel"]}\n'
            f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {data["role"]}\n\n'
            f'–°–ø–∞—Å–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö',
            state, reply_markup=kb.getphoto
        )
    await state.set_state(Register.verefy)

#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –§–æ—Ç–æ–≥—Ä–∞—Ñ
@router.callback_query(Register.role, F.data == '–§–æ—Ç–æ–≥—Ä–∞—Ñ')
async def select_rol(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    message = callback_query.message
    await mes_user_history(message, state)
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.update_data(role=callback_query.data,
                            photofile1='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile2='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile3='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                            serial1='NoSerial', serial2='NoSerial', serial3='NoSerial'
                            )
    await send_typing_and_message(
        message.chat.id, bot,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∫–∞–∂–¥–æ–π –≤–∞—à–µ–π –∫–∞–º–µ—Ä—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ñ–∞–π–ª–æ–º.',
        state, reply_markup=kb.getphoto
    )
    await state.set_state(Register.photofile1)
# –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã —Ñ–æ—Ç–æ–≥–∞—Ä–∞—Ñ–∏–∏ –≥—Ä—É–ø–ø–æ–π, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç—Ç–æ—Ç
@router.message(Register.photofile1, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO}), F.media_group_id)
async def handle_media_group(message: Message, bot: Bot, state: FSMContext):
    media_group_id = message.media_group_id
    username = message.from_user.username
    data = await state.get_data()

    await mes_user_history(message, state)
    try:
        if media_group_id not in media_groups_cache:
            media_groups_cache[media_group_id] = {
                "username": username,
                "documents": [],
                "processed": False,
                "invalid": False
            }

        group_data = media_groups_cache[media_group_id]

        if group_data["processed"] or group_data["invalid"]:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É
        if message.document:
            document_data = {
                "file_id": message.document.file_id,
                "file_name": message.document.file_name
            }
        elif message.photo:
            document_data = {
                "file_id": message.photo[-1].file_id,
                "file_name": None
            }
        group_data["documents"].append(document_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 3 —Ñ–∞–π–ª–∞
        if len(group_data["documents"]) > 3:
            group_data["invalid"] = True
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–π–ª–∞ –≤ –≥—Ä—É–ø–ø–µ!")
            return

        await asyncio.sleep(3)

        if not group_data["invalid"] and not group_data["processed"] and data["serial1"] == 'NoSerial':
            group_data["processed"] = True
            saved_files = await process_documents(group_data["documents"], username, bot)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö FSM
            fsm_data = {
                "serial1": None,
                "serial2": None,
                "serial3": None,
                "photofile1": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                "photofile2": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                "photofile3": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
            }

            results = []
            for i, file_path in enumerate(saved_files):
                if i >= 3:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    break

                serial = await sn.async_get_camera_serial_number(file_path)
                file_name = os.path.basename(file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
                fsm_data[f"serial{i + 1}"] = serial
                fsm_data[f"photofile{i + 1}"] = group_data["documents"][i]["file_id"]
                results.append(f"üìÅ {file_name}\nüî¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {serial}")

            # –û–±–Ω–æ–≤–ª—è–µ–º FSM
            await state.update_data(fsm_data)
            await send_typing_and_message(
                message.chat.id, bot,
                "\n\n".join(results),
                state
            )
            await send_typing_and_message(
            message.chat.id, bot,
                f'–°–ø–∞—Å–∏–±–æ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ {i + 1} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.',
                state, reply_markup=kb.getphoto)
            if i + 1  == 2:
                await state.set_state(Register.photofile3)
            else:
                await state.set_state(Register.verefy)


    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ö–æ—á–µ—Ç –¥–µ–Ω–µ–≥: {str(e)}")

    finally:
        if media_group_id in media_groups_cache:
            del media_groups_cache[media_group_id]

@router.message(Register.photofile1, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await save_document(message, bot)
    serial = await sn.main(message)
    await state.update_data(photofile1=message.document.file_id)
    await state.update_data(serial1=serial)
    await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é  —Å –¥—Ä—É–≥–æ–π –∫–∞–º–µ—Ä—ã —Ç–∞–∫ –∂–µ —Ñ–∞–π–ª–æ–º, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π '
                         '–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                         reply_markup=kb.getphoto)
    await state.set_state(Register.photofile2)



@router.message(Register.photofile2, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await save_document(message, bot)
    serial = await sn.main(message)
    await state.update_data(serial2=serial)
    await state.update_data(photofile2=message.document.file_id)
    await state.set_state(Register.photofile3)
    await save_document(message, bot)
    await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 2 —Ñ–∞–π–ª–∞.\n–í—Å–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è 3 —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é  —Å –¥—Ä—É–≥–æ–π –∫–∞–º–µ—Ä—ã —Ç–∞–∫ –∂–µ —Ñ–∞–π–ª–æ–º, –∏–ª–∏ '
                         '–∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                         reply_markup=kb.getphoto)
    await state.set_state(Register.photofile3)

@router.message(Register.photofile3, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await mes_user_history(message, state)
    if data["serial3"] == None or data["serial3"] == 'NoSerial':
        await save_document(message, bot)
        serial = await sn.main(message)
        await state.update_data(serial3=serial)
        await state.update_data(photofile3=message.document.file_id)
        await save_document(message, bot)
        await message.answer('–°–ø–∞—Å–∏–±–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ',
                             reply_markup=kb.getphoto)
        await state.set_state(Register.verefy)
    else:
        await state.set_state(Register.verefy)


@router.message(Register.verefy, F.document)
async def many_camer(message: types.Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    await send_typing_and_message(
        message.chat.id, bot,
        f'–£ –≤–∞—Å —á—Ç–æ 4 —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞?\n'
        f'–•–≤–∞—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
        state, reply_markup=kb.getphoto
    )


# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –µ–≥–æ ID
# @router.message(F.document)
# async def get_document(message: Message):
#     await message.answer(f'ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {message.document.file_id}')

@router.message(Register.verefy, F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile1, F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile2, F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile3, F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
async  def verefy(message: types.Message, state: FSMContext, bot: Bot):
        await mes_user_history(message, state)
        await delete_all_previous_messages(message.chat.id, state, bot)
        await send_typing_and_message(
            message.chat.id, bot,
            '–°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:',
            state, reply_markup=ReplyKeyboardRemove()
        )

        data = await state.get_data()
        if data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile2"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile1"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {data["role"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        elif data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile2"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer_document(data["photofile1"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {data["role"]}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        elif data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer_document(data["photofile1"])
            await message.answer_document(data["photofile2"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {data["role"]}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n'
                f'2Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã: {data["serial2"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        else:
            await message.answer_document(data["photofile1"])
            await message.answer_document(data["photofile2"])
            await message.answer_document(data["photofile3"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {data["role"]}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n'
                f'2Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã: {data["serial2"]}\n'
                f'3Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ—Ç—å–µ–π –∫–∞–º–µ—Ä—ã: {data["serial3"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)


@router.callback_query(F.data == 'no')
async  def proverka_no(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id, reply_markup=None)
    await callback.answer('–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?.', show_alert=True)
    data = await state.get_data()
    await callback.message.edit_text(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRu"]}\nü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEn"]}\n‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™™ –í–∞—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\nüì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\nü™Ü –í–∞—à—É –†–æ–ª—å: {data["role"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.edit)

#-----------------------------------------------------------------------------------------------------------------------
#   –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#-----------------------------------------------------------------------------------------------------------------------
@router.callback_query(F.data == 'RU')
async def register_nameRu2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.nameRu2)
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')

@router.message(Register.nameRu2)
async def register_nameRu2(message: Message, state: FSMContext):
    await state.update_data(nameRu=message.text)
    await state.set_state(Register.verefy)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                         reply_markup=kb.getphoto)

@router.callback_query(F.data == 'EN')
async def register_nameEn2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.nameEn2)
    data = await state.get_data()
    await  callback_query.message.answer(text=f'–í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n'
                                              f'–°–µ–π—á–∞—Å –æ–Ω–æ —Ç–∞–∫–æ–µ: {data["nameEn"]}')

@router.message(Register.nameEn2)
async def register_nameEn2(message: Message, state: FSMContext):
    await state.update_data(nameEn=message.text)
    await state.set_state(Register.verefy)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                             reply_markup=kb.getphoto)

@router.callback_query(F.data =='idn')
async  def register_idn2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.idn2)
    data = await state.get_data()
    await callback_query.message.answer(text=f'–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –≤–æ—Ç —Ç–∞–∫ KNA\n'
                              f'—Å–µ–π—á–∞—Å –≤–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã —Ç–∞–∫–∏–µ: –í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}')
@router.message(Register.idn2)
async  def register_idb2(message: Message, state: FSMContext):
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_idn = re.sub(r'[^A-Za-z]', '', message.text).upper()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
        if len(clean_idn) != 3:
            await message.answer(
                "‚ùå ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.\n"
                "–ü—Ä–∏–º–µ—Ä: KNA\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Register.idn

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(idn=clean_idn)
        await state.set_state(Register.verefy)
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=kb.getphoto)


@router.callback_query(F.data =='contact')
async  def register_mailcontact2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.mailcontact2)
    data = await state.get_data()
    await callback_query.message.answer(text=f'–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã  –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n'
                              f'—Å–µ–π—á–∞—Å –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–∞–∫–∏–µ:\n\nüì´ {data["mailcontact"]}')

@router.message(Register.mailcontact2)
async  def register_mailcontact2(message: Message, state: FSMContext):
    await state.update_data(mailcontact=message.text)
    await state.set_state(Register.verefy)
    data = await state.get_data()
    text = (f"{Texts.Messages.DONE}\n" 
            f'\n–°–µ–π—á–∞—Å –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–∞–∫–∏–µ:\n\nüì´  {data["mailcontact"]}')
    await message.answer(text, reply_markup=kb.getphoto)

@router.callback_query(F.data =='phone')
async  def edit_tel(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    global edit
    message = callback_query.message
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id, reply_markup=None)
    data = await state.get_data()
    await mes_user_history(message, state)
    await send_typing_and_message(
        message.chat.id, bot,
        f'üì´ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\n'
             f'—Å–µ–π—á–∞—Å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n‚òéÔ∏è –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}',
        state, reply_markup=kb.get_tel
    )
    await state.set_state(Register.tel)
    edit = 1


#–í–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
@router.callback_query(F.data == 'role')
async def select_rol2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.role2)
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ', reply_markup=await kb.roles())

@router.callback_query(Register.role2)
async def select_rol2(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(role=callback_query.data)
    await state.set_state(Register.verefy)
    await callback_query.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=kb.getphoto)
    await state.clear()

# @router.callback_query(F.data =='phone')
# async  def register_tel2(message: Message, state: FSMContext):




#-----------------------------------------------------------------------------------------------------------------------
#   –ö–æ–Ω–µ—Ü –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#-----------------------------------------------------------------------------------------------------------------------

@router.callback_query(F.data == 'yes')
async def proverka_yes(callback: CallbackQuery, state: FSMContext, bot: Bot):
    message = callback.message
    await delete_all_previous_messages(message.chat.id, state, bot)
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id, reply_markup=None)
    await callback.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.', show_alert=True)
    await callback.message.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.')
    data = await state.get_data()
    try:
        await rq.set_item(data)
        await callback.message.answer(text=Texts.Messages.REG_SUCCESS, reply_markup=ReplyKeyboardRemove())
        await fu.number_row(data)
        await state.clear()

    except Exception as e:
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞: \n {str(e)}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, –æ–Ω –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç —Å–Ω–æ–≤–∞",reply_markup=ReplyKeyboardRemove())
            await state.clear()

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ id
#     await rq.set_item(data)
#     await state.clear()
    await state.set_state(StartState.active)


#–í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
@router.message(F.text == "–ú–æ–∂–Ω–æ –≤—Å–µ—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def view_all_items(message: types.Message):
    for item in await rq.get_item():
        try:
            await message.answer_document(document=item.serial1,
                                          caption=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                                  f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                                  f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                                  f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                                  f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                                  f'ü™Ü –†–æ–ª—å: {item.role}',
                                          protect_content=True,
                                          reply_markup=await kb.edit_item(btns={
                                              '–£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                              '–ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'})
                                          )
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))
        except TelegramBadRequest:
            await message.answer(text=f'ü™™ –§–ò–û ru: {item.nameRU}\n'
                                      f'ü™™ –§–ò–û en: {item.nameEN}\n'
                                      f'ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {item.idn}\n'
                                      f'üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {item.mailcontact}\n'
                                      f'‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {item.tel}\n'
                                      f'ü™Ü –†–æ–ª—å: {item.role}',
                                 protect_content=True,
                                 message_effect_id="5046589136895476101",
                                 reply_markup=await kb.edit_item(btns={
                                     'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å': f'delete_{item.id}',
                                     '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å': f'change_{item.id}'}))
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ —è—á–µ–π–∫—É
            # sh.wks.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], 'A2')
            # –∑–∞–ø–∏—Å—å –ø—Ä–æ—Å—Ç–æ –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —è—á–µ–π–∫—É,–Ω–æ —è—á–µ–π–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ–µ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ—Ö–æ–∂–µ –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–µ–ª–∞—Ç—å
            # await fu.number_row(item)
            # await fu.sh.update([[f'{item.nameRU}',f'{item.nameEN}',f'{item.idn}',f'{item.mailcontact}',f'{item.tel}',f'{item.role}']], "A{}".format(sh.next_row))
    await message.answer("–í–æ—Ç –≤—Å–µ, –ª—é–±—É–π—Å—è")

#–õ–æ–≤–∏–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—é
@router.callback_query(F.data.startswith('delete_'))
async def delete_item(callback: CallbackQuery):
    item_id = callback.data.split("_")[-1]
    await  rq.del_item(int(item_id))
    await callback.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')
    await callback.message.answer(text=f'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')

#DeepSeek
@router.message(F.text == "–ø–æ–≥–æ–≤–æ—Ä–∏", )
async def deepseek(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å?')
    await state.set_state(Gen.result)

@router.message(Gen.result)
async def generating(message: Message, state: FSMContext):
    await state.set_state(Gen.wait)
    responses = await ai_generate(message.text)
    await message.answer(responses)
    await state.clear()

@router.message(Gen.wait)
async def stop_flood(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏ —Ç—ã, –Ω–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, —ç–π!')



