import logging
from html.parser import HTMLParser

from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
import Texts
import os
import re
import asyncio

from datetime import datetime
from pathlib import Path
from aiogram import F, Router, types, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType, ChatAction
from aiogram.enums import ParseMode
#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from Texts import Messages
from app.database.models import Item
from app.Filters.chat_types import ChatTypeFilter # –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã

import app.keyboards as kb
import app.database.requests as rq
import app.Sheets.function as fu
import app.SerialNumber as sn
import app.Utils.validators as vl

#–û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ router Router
router = Router()
# –≤–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞
router.message.filter(ChatTypeFilter(['private']))

class StartState(StatesGroup):
    active = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è


class Register(StatesGroup):
    # last_bot_message_id = State()
    tg_id = State()
    nameRU = State()
    nameEN = State()
    idn = State()
    mailcontact = State()
    tel = State()
    role = State()
    photofile1 = State()
    photofile2 = State()
    photofile3 = State()
    serial1 = State()
    serial2 = State()
    serial3 = State()
    verify = State()
    nameRU2 = State()
    nameEN2 = State()
    idn2 = State()
    mailcontact2 = State()
    tel2 = State()
    role2 = State()
    texts = Texts.StatesText.REGISTER

class Gen(StatesGroup):
    wait = State()
    result = State()

class Find(StatesGroup):
    wait = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    send = State()    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    exclude = State() # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_format = State() # –í—ã–≤–æ–¥ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è single –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∂–¥–∞—è —Å—ä–µ–º–∫–∞ multiple

class AdminApproval(StatesGroup):
    waiting = State()



# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
# last_bot_message_id = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit = None

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    await asyncio.sleep(1)
    await state.set_state(StartState.active)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ items
    user_item = await rq.get_item_by_tg_id(message.from_user.id)
    await rq.set_user(message.from_user.id)  # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º users

    if user_item:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role_name = await rq.get_role_name(user_item.role)
        logging.info(f'—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role_name}')
        keyboard = await kb.get_role_keyboard(role_name)
        if role_name == "–§–æ—Ç–æ–≥—Ä–∞—Ñ":
            await message.answer_photo(
                photo='AgACAgIAAxkBAAIuR2fashuwXR4JxPqppsyLq2s6YItVAALZ8jEbEyXZSoH5VvsTs1cBAQADAgADeQADNgQ',
                caption=f"üëã –§–æ—Ç–æ–≥—Ä–∞—Ñ: {user_item.nameRU}!"
            )
            await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
            await asyncio.sleep(1)
            await message.answer(text=Messages.INTRO_PHOTO, parse_mode=ParseMode.HTML,
                reply_markup=keyboard)
        elif role_name == "–ë–∏–ª–¥-—Ä–µ–¥–∞–∫—Ç–æ—Ä":
            await message.answer_photo(
                photo='AgACAgIAAxkBAAIuTGfatOPysGg2vhxRh9MQnXq7aCXOAALt8jEbEyXZSuZMham3gcOVAQADAgADeQADNgQ',
                caption=f"üëã –ë–∏–ª–¥-–†–µ–¥–∫–∞—Ç–æ—Ä: {user_item.nameRU}!"
            )
            await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
            await asyncio.sleep(1)
            await message.answer(text=Messages.INTRO_BILD, parse_mode=ParseMode.HTML,
                reply_markup=keyboard)
        elif role_name == "–ú–µ–Ω–µ–¥–∂–µ—Ä":
            await message.answer_photo(
                photo='AgACAgIAAxkBAAIuTmfatYlB48bNskC7axaoEpWmfpc3AALx8jEbEyXZSrPOh6NQcu0XAQADAgADeQADNgQ',
                caption=f"üëã –ú–µ–Ω–µ–¥–∂–µ—Ä: {user_item.nameRU}!"
            )
            await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
            await asyncio.sleep(1)
            await message.answer(text=Messages.INTRO_MANAGER, parse_mode=ParseMode.HTML,
                reply_markup=keyboard)
        else:
            await message.answer_photo(
                photo='AgACAgIAAxkBAAPgZ361se9D_xn8AwRI7Y1gBmdmTiwAAgfrMRsQmvlLUMXQ9_Z9HXABAAMCAAN5AAM2BA',
                caption=f"üëã –ö—Ç–æ —Ç—ã? {user_item.nameRU}!"
            )
            await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
            await asyncio.sleep(1)
            await message.answer(text=Messages.INTRO_OTHER, parse_mode=ParseMode.HTML,
                reply_markup=keyboard)
        await state.clear()

    else:
        await message.answer_photo(
            photo='AgACAgIAAxkBAAIzc2fkS212HK92krQwBN0jZ_V9_vkwAAJO6jEbAiMhSypAR-6ivIdJAQADAgADeQADNgQ',
            caption=Messages.START.format(name=message.from_user.full_name),
        )
        # await message.answer_photo(
        #     photo='AgACAgIAAxkBAAPgZ361se9D_xn8AwRI7Y1gBmdmTiwAAgfrMRsQmvlLUMXQ9_Z9HXABAAMCAAN5AAM2BA',
        #     caption=Messages.START.format(name=message.from_user.full_name),
        # )
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        await asyncio.sleep(1)
        await message.answer(text=Messages.INTRO, parse_mode=ParseMode.HTML
        )

# # –°—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
# @router.message(CommandStart())
# # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è cmd_start –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è –æ–±—ä–µ–∫—Ç Massage
# async def cmd_start(message: Message, state: FSMContext, bot: Bot,):
# # –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ cmd_start –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ—Ç–æ–¥—É answer, –æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# #     await message.answer('–ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.main)
# # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É main
#     await  state.clear()
#     # await mes_user_history(message, state)
#     await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
#     await asyncio.sleep(1)
#     await state.set_state(StartState.active)
#     await message.answer_photo(photo='AgACAgIAAxkBAAPgZ361se9D_xn8AwRI7Y1gBmdmTiwAAgfrMRsQmvlLUMXQ9_Z9HXABAAMCAAN5AAM2BA',
#                                caption=Messages.START.format(name=message.from_user.full_name)
#                                # reply_markup=kb.main)
#     )
#     await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
#     await asyncio.sleep(1)
#     await message.answer(text=Messages.INTRO, parse_mode=ParseMode.HTML)
#     # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ id
#     await rq.set_user(message.from_user.id)
# # –ö–æ–Ω–µ—Ü —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤ –∫–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ (callback)
async def register_handler(message: Message, state: FSMContext, bot: Bot, tg_id: int = None):
    await state.clear()
    # –ï—Å–ª–∏ tg_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not tg_id:
        tg_id = message.from_user.id
    logging.info(f'–¢–µ–∫—É—â–∏–π id: {tg_id}')

    # # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    # await rq.delete_duplicates(tg_id)

    current_user = await rq.get_item_by_tg_id(tg_id)
    logging.info(f'–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_user}')

    if current_user:
        await state.update_data(is_edit=True, item_id=current_user.id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        text = Texts.Messages.REGISTER_START_EDIT
    else:
        text = Texts.Messages.REGISTER_START

    await send_typing_and_message(
        message.chat.id,
        bot,
        text,
        state,
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Register.nameRU)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@router.message(StateFilter('*'), Command('register'))
async def register_via_command(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not await rq.get_registration_status():
        await message.answer(Texts.Messages.REGISTER_DISABLE)
        return
    else:
        await register_handler(message, state, bot)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
@router.callback_query(F.data == 'edit_data')
async def register_via_schedule(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–∂–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # if not await rq.get_registration_status():
    #     await callback.answer("‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
    #     return
    await callback.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback, –∞ –Ω–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    tg_id = callback.from_user.id
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. User ID: {tg_id}")
    await register_handler(callback.message, state, bot, tg_id)



# # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
# @router.message(StateFilter('*'), Command('register'))
# async def register(message: Message, state: FSMContext, bot: Bot):
#     await state.clear()
#     current_user = await rq.get_item_by_tg_id(message.from_user.id)
#     # –∑–∞–ø–∏—à–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–µ —É–¥–∞–ª–µ–Ω–∏—è
#     await mes_user_history(message, state)
#     if current_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
#         await state.update_data(is_edit=True)
#         await send_typing_and_message(
#             message.chat.id, bot,
#             "‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
#             "–°–ø–µ—Ä–≤–∞ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:",
#             state, reply_markup=ReplyKeyboardRemove()
#         )
#     else:
#         await send_typing_and_message(
#             message.chat.id, bot,
#             "‚úÖ –ù–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
#             state, reply_markup=ReplyKeyboardRemove()
#         )
#         await send_typing_and_message(
#             message.chat.id, bot,
#             f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
#             state
#         )
#     # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
#     await state.set_state(Register.nameRU)


async def menu_core_handler(source: Message | CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    message = source if isinstance(source, Message) else source.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_item = await rq.get_item_by_tg_id(message.from_user.id)

    if user_item:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        await asyncio.sleep(1)

        role_name = await rq.get_role_name(user_item.role)
        keyboard = await kb.get_role_keyboard(role_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /start
        caption = f"üëã {role_name}: {user_item.nameRU}!"
        text = {
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ": Messages.INTRO_PHOTO,
            "–ë–∏–ª–¥-—Ä–µ–¥–∞–∫—Ç–æ—Ä": Messages.INTRO_BILD,
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": Messages.INTRO_MANAGER
        }.get(role_name, Messages.INTRO_OTHER) # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.

        # await message.answer_photo(
        #     photo='AgACAgIAAxkBAAPgZ361se9D_xn8AwRI7Y1gBmdmTiwAAgfrMRsQmvlLUMXQ9_Z9HXABAAMCAAN5AAM2BA',
        #     caption=caption
        # )
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        await asyncio.sleep(1)
        await message.answer(text=text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        error_text = Texts.Messages.MENU_NO_REG

        if isinstance(source, CallbackQuery):
            await source.answer(error_text, show_alert=True)
        else:
            await message.answer(error_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@router.message(Command('menu'))
async def menu_command(message: Message, state: FSMContext, bot: Bot):
    await menu_core_handler(message, state, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback menu_personal
@router.callback_query(F.data == 'menu_personal')
async def menu_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await menu_core_handler(callback, state, bot)
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ



#-----------------------------------------------------------------------------------------------------------------------
#–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#-----------------------------------------------------------------------------------------------------------------------

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è StartState
@router.message(StateFilter(StartState.active), ~F.command)
async def handle_start_state(message: types.Message, bot: Bot):
    if not message.text or not message.text.startswith('/'):
    # """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            notify = await message.answer("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã!")
            await asyncio.sleep(3)
            await notify.delete()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
# @router.message()
# async def handle_other_messages(message: types.Message, bot: Bot):
#     # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
#     if not message.text.startswith('/'):
#         await asyncio.sleep(1)
#         await delete_message_safe(message.chat.id, message.message_id, bot)
#         msg = await message.answer("‚ÑπÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∫–æ–º–∞–Ω–¥—ã")
#         await asyncio.sleep(2)
#         await msg.delete()
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –í –ê–ö–¢–ò–í–ù–û–ú –¥–∏–∞–ª–æ–≥–µ
# @router.message(StateFilter(None))
# async def handle_dialog(message: Message, state: FSMContext, bot: Bot):
#     # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ registered
#     await message.delete()
#     # ... –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ...
#     await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
async  def mes_user_history(message: Message, state: FSMContext):
    data = await state.get_data()
    message_history = data.get('message_history', [])
    message_history.append(message.message_id)
    await state.update_data(message_history=message_history)
    print(f'–ó–∞–ø–∏—Å–∞–ª–∏ –æ—Ç —é–∑–µ—Ä–∞: {message_history}')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_message_safe(chat_id: int, message_id: int, bot: Bot):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await asyncio.sleep(0.3)
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def delete_all_previous_messages(chat_id: int, state: FSMContext, bot: Bot):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    data = await state.get_data()
    messages_to_delete = data.get("message_history", [])
    print(f'Del: {messages_to_delete}')
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    for msg_id in messages_to_delete:
        await delete_message_safe(chat_id, msg_id, bot)
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(message_history=[])

# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è State —Å –≤–Ω–µ—Å–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é.
async def send_typing_and_message(chat_id: int, bot: Bot, text: str, state: FSMContext = None, parse_mode=None, reply_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.
    Args:
        chat_id (int): ID —á–∞—Ç–∞.
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞.
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        state (FSMContext): –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
        reply_markup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    Returns:
        Message: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param parse_mode:
    """
    await bot.send_chat_action(chat_id, ChatAction.TYPING)
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏
    message = await bot.send_message(chat_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
    # if state:
    #     await state.update_data(message_history=[message.message_id])
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if state:
        data = await state.get_data()
        message_history = data.get('message_history', [])
        message_history.append(message.message_id)
        await state.update_data(message_history=message_history)
        print(f'–ó–∞–ø–∏—Å–∞–ª–∏ –æ—Ç –±–æ—Ç–∞: {message_history}')
    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ñ–æ—Ç–æ)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø (–ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ë–î –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
media_groups_cache = {}

async def process_documents(documents: list, username: int, bot: Bot) -> list:
    user_dir = f"downloads/{username}"
    os.makedirs(user_dir, exist_ok=True)
    saved_files = []
    for doc in documents:
        file_id = doc["file_id"]
        file_name = doc["file_name"] or f"file_{file_id[:6]}"
        file = await bot.get_file(file_id)
        file_path = f"{user_dir}/{file_name}"
        await bot.download_file(file.file_path, file_path)
        saved_files.append(file_path)

    return saved_files

# —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –∞–¥–º–∏–Ω—É –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
async def generate_diff_message(old_item: Item, new_data: dict) -> str:
    diff = []
    fields = {
        'nameRU': '–ò–º—è (RU)',
        'nameEU': '–ò–º—è (EN)',
        'idn': '–ò–Ω–∏—Ü–∏–∞–ª—ã',
        'tel': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'mailcontact': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
        'serial1': '–°–µ—Ä–∏–π–Ω–∏–∫ 1',
        'serial2': '–°–µ—Ä–∏–π–Ω–∏–∫ 2',
        'serial3': '–°–µ—Ä–∏–π–Ω–∏–∫ 3',
        'role': '–†–æ–ª—å'
    }

    for field, name in fields.items():
        old_val = getattr(old_item, field, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        new_val = new_data.get(field, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

        if str(old_val) != str(new_val):
            diff.append(
                f"‚ñ´Ô∏è {name}:\n"
                f"–ë—ã–ª–æ: {old_val}\n"
                f"–°—Ç–∞–ª–æ: {new_val}\n"
            )

    return "\n".join(diff) if diff else "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª—è—Ö"

#-----------------------------------------------------------------------------------------------------------------------
#–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
#-----------------------------------------------------------------------------------------------------------------------


@router.message(F.photo, StateFilter(Register.photofile1, Register.photofile2, Register.photofile3))
async def forward_message(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ
    await bot.forward_message('-1002378314584', message.from_user.id, message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —Ñ–æ—Ç–æ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
    await bot.send_message('-1002378314584', f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_typing_and_message(message.chat.id, bot, Texts.Messages.PHOTO, state, parse_mode=ParseMode.HTML)
    await send_typing_and_message(message.chat.id, bot,f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}', state)


# @router.message(F.document)
# async def forward_message(message: Message, bot: Bot):
#     await bot.forward_message('-1002378314584', message.from_user.id, message.message_id)
#     await message.answer('–°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.')



#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ Download. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è 3 —Ä–∞–∑–∞ –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
async def save_document(message: types.Message, bot: Bot):
    document = message.document
    file_id = document.file_id  # –ü–æ–ª—É—á–∞–µ–º id –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_name = document.file_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    sender_name = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file = await bot.get_file(file_id)
    file_path = file.file_path
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–∏–∫–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    os.makedirs(f'downloads/{sender_name}', exist_ok=True)
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download_file(file_path, f'downloads/{sender_name}/{file_name}')
    # await sn.main(message)
    # await message.answer('–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

# –û—Ç–¥–µ–ª—å–Ω—ã–π –†–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
# @router.message(F.document)
# async def process_document(message: types.Message, bot: Bot):
#     await save_document(message, bot)

# @router.message(F.text == '–§–ò–û')
# async def fio(message: Message):
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å', reply_markup=kb.fio)

@router.callback_query(F.data == 'ru')
async  def fio(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.', show_alert=True)
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.')

# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –û—Ç–º–µ–Ω–∞
@router.callback_query(F.data == 'cancel')
async def cancel_heandler(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    message = callback.message
    current_state = await  state.get_state()
    await delete_all_previous_messages(message.chat.id, state, bot)
    if current_state is None:
        return
    await state.clear()
    await send_typing_and_message(
        message.chat.id, bot,
        f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.',
        state, reply_markup=kb.main
    )
    await asyncio.sleep(3)
    await delete_all_previous_messages(message.chat.id, state, bot)

# –û—Ç–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–∫—Å—Ç—É –û—Ç–º–µ–Ω–∞
@router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_heandler_text(message: types.Message, state: FSMContext, bot: Bot) -> None:
    current_state = await  state.get_state()
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    if current_state is None:
        return

    await send_typing_and_message(
        message.chat.id, bot,
        f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.',
        state, reply_markup=kb.main
    )
    await asyncio.sleep(3)
    await delete_all_previous_messages(message.chat.id, state, bot)
    await state.clear()



# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –ø–æ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data == 'back')
@router.message(StateFilter('*'), Command("–Ω–∞–∑–∞–¥"))
@router.message(StateFilter('*'), F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def cancel_heandler(message: types.Message, state: FSMContext) -> None:

    current_state = await  state.get_state()
    # print(current_state)
    if current_state == Register.nameRU:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç.\n–í–≤–µ–¥–∏—Ç–µ  –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        return
    if current_state == Register.mailcontact:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –§–ò–û.\n–í–≤–µ–¥–∏—Ç–µ  –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.nameRU)
        return
    if current_state == Register.tel:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ  –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.mailcontact)
        return
    if current_state == Register.role:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ  —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.tel)
        return
    if current_state == Register.photofile1:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–Ω–æ–≤—å –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞".')
        await state.set_state(Register.role)
        return
    if current_state == Register.photofile2:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n —Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile1)
        return
    if current_state == Register.photofile3:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile2)
        return
    if current_state == Register.verify:
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ—Ç—å–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ç—Ä–µ—Ç—å–µ–π –∫–∞–º–µ—Ä—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"')
        await state.set_state(Register.photofile3)
        return

    previous = None
    for step in Register.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await  message.answer(f'–û–∫, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {Register.texts[previous.state]}')
            return
        previous = step


# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(Register.nameRU)
async def register_nameRU(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    try:
        if not await vl.validate_name_ru(message.text):
            raise vl.ValidationError(Texts.Messages.INVALID_NAME)
    except vl.ValidationError as e:
        await send_typing_and_message(message.chat.id, bot, str(e), state)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞

    # if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\-\' ]+$", message.text):
    #     return await send_typing_and_message(
    #         message.chat.id, bot,
    #         "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è",
    #         state)

    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        nameRU = await vl.format_fio(message.text)
        nameEN = await vl.transliterate_name(message.text)
        initials = await vl.generate_initials(nameEN)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º generate_initials –≤–º–µ—Å—Ç–æ validate_initials

        await state.update_data(
            nameRU=nameRU,
            tg_id=message.from_user.id,
            nameEN=nameEN,
            idn=initials,
        )
    except vl.ValidationError as e:
        await send_typing_and_message(message.chat.id, bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {str(e)}", state)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞

    # –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_all_previous_messages(message.chat.id, state, bot)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_typing_and_message(
        message.chat.id, bot,
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {nameRU}\n\n"
        f"ü™™ –í–∞—à–µ –∏–º—è RU: {nameRU}\n"
        f"ü™™ –í–∞—à–µ –∏–º—è EN: {nameEN}\n"
        f"ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {initials}\n\n"
        f"üì´ –í–≤–µ–¥–∏—Ç–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (–ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏):",
        state, reply_markup=kb.back_cancel
    )
    await state.set_state(Register.mailcontact)

@router.message(Register.mailcontact)
async def register_mailcontact(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    await state.update_data(mailcontact=message.text)

    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # await delete_message_safe(message.chat.id, message.message_id, bot)
    # # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è"
    # await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    # await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—á–∞—Ç–∏
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    await send_typing_and_message(
        message.chat.id, bot,
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {message.text}\n\n"
        f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
        f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
        f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
        f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n\n'
        f'‚òéÔ∏è –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –¢–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä" –Ω–∏–∂–µ üëá.\n'
        f'–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        state, reply_markup=kb.get_tel
    )
    await state.set_state(Register.tel)


# @router.message(Register.tel, F.contact)
# async def get_contact(message: Message, state: FSMContext):
#     phone = message.contact.phone_number
#     await message.answer(f"–ù–æ–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {phone}", reply_markup=types.ReplyKeyboardRemove())
#     await state.update_data(tel=phone)
#     await state.set_state(Register.role)
#     await message.answer('–°–ø–∞—Å–∏–±–æ',reply_markup=ReplyKeyboardRemove())
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä', reply_markup=await kb.roles())
#
# @router.message(Register.tel, F.text)
# async def validate_phone(message: Message):
#     # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
#     phone = re.sub(r'[^\d]', '', message.text)
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
#     if len(phone) == 10:
#         phone = f'7{phone}'
#     elif len(phone) == 11 and phone.startswith(('7', '8')):
#         phone = f'7{phone[1:]}'
#
#     if re.match(PHONE_REGEX, message.text) and len(phone) == 12:
#         await message.answer(f"–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä: +{phone}", reply_markup=types.ReplyKeyboardRemove())
#     else:
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É:",
#                              reply_markup=kb.get_tel)

@router.message(Register.tel, F.contact)
async def register_tel(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    phone = message.contact.phone_number
    global edit

    if phone and edit !=1:
        data = await state.get_data()
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=phone)
        await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {phone}\n\n"
            f'–í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
            f'–í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
            f'–í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'–í–∞—à–∏ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'–í–∞—à –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ {phone}\n\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä',
            state, reply_markup=await kb.roles()
        )
        await state.set_state(Register.role)
    if phone and edit == 1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=phone)
        data = await state.get_data()
        await send_typing_and_message(
            message.chat.id, bot,
            f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n'
            f'–í–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n'
            f'‚òéÔ∏è {data["tel"]}',
            state, reply_markup=kb.getphoto
        )
        await state.set_state(Register.verify)
        edit = 0




@router.message(Register.tel, F.text)
async def validate_phone(message: Message, state: FSMContext, bot: Bot):
    global edit
    await mes_user_history(message, state)
    formatted = await vl.format_phone(message.text)
    data = await state.get_data()
    if formatted and edit !=1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=formatted)
        await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {formatted}\n\n"
            f'–í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
            f'–í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
            f'–í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'–í–∞—à–∏ üì´ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'–í–∞—à –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ {formatted}\n\n'
            f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä',
            state, reply_markup=await kb.roles()
        )
        await state.set_state(Register.role)
    elif formatted and edit == 1:
        await delete_all_previous_messages(message.chat.id, state, bot)
        await state.update_data(tel=formatted)
        await state.set_state(Register.verify)
        await send_typing_and_message(
            message.chat.id, bot,
            f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n'
            f'–í–∞—à –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n'
            f'‚òéÔ∏è {formatted}',
            state, reply_markup=kb.getphoto
        )
        edit = 0
    else:
        await send_typing_and_message(
            message.chat.id, bot,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞", state, reply_markup=kb.get_tel)
    # else:
    #     await message.answer(f'‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n'
    #                          f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä ‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=kb.get_tel)

#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç—Å—è –∫–Ω–æ–ø–∫–∞ —Å —Ä–æ–ª—å—é
@router.message(Register.role, ~F.command, )
async def handle_start_state(message: types.Message, bot: Bot):
    if not message.text or not message.text.startswith('/') or not message.text.join('–æ—Ç–º–µ–Ω–∞'):
    # """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            notify = await message.answer("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            await asyncio.sleep(4)
            await notify.delete()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ
@router.callback_query(Register.role, F.data != 'role_1')
async def select_rol(callback_query: types.CallbackQuery, state: FSMContext,  bot: Bot):
    message = callback_query.message
    role_id = int(callback_query.data.split('_')[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–æ–ª–∏
    # await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    #—É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    # await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.update_data(role=role_id,
                            photofile1='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile2='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile3='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                            serial1='NoSerial', serial2='NoSerial', serial3='NoSerial'
                            )
    data = await state.get_data()
    role = await rq.get_role_name(data["role"])
    await send_typing_and_message(
            message.chat.id, bot,
            f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ:  {role}\n\n"
            f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
            f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
            f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
            f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
            f'‚òéÔ∏è –í–∞—à –Ω–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞ {data["tel"]}\n'
            f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {role}\n\n'
            f'–°–ø–∞—Å–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö',
            state, reply_markup=kb.getphoto
        )
    await state.set_state(Register.verify)

#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –§–æ—Ç–æ–≥—Ä–∞—Ñ
@router.callback_query(Register.role, F.data == 'role_1')
async def select_rol(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    message = callback_query.message
    # await mes_user_history(message, state)
    role_id = int(callback_query.data.split('_')[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–æ–ª–∏
    await delete_all_previous_messages(message.chat.id, state, bot)
    # await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.update_data(role=role_id,
                            photofile1='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile2='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', photofile3='–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                            serial1='NoSerial', serial2='NoSerial', serial3='NoSerial'
                            )
    data = await state.get_data()
    role = await rq.get_role_name(data["role"])

    await send_typing_and_message(
            message.chat.id, bot,
        Texts.Messages.MES_PHOTOGRAPHER_FILE1.format(
            role=role,
            nameRU=data["nameRU"],
            nameEN=data["nameEN"],
            idn=data["idn"],
            mailcontact=data["mailcontact"],
            tel=data["tel"],
        ),
            state, parse_mode=ParseMode.HTML, reply_markup=kb.getphoto
        )
    await send_typing_and_message(
        message.chat.id, bot,
        Texts.Messages.PHOTO_FILE,
        state, parse_mode=ParseMode.HTML, reply_markup=kb.getphoto
    )
    await state.set_state(Register.photofile1)

# –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã —Ñ–æ—Ç–æ–≥–∞—Ä–∞—Ñ–∏–∏ –≥—Ä—É–ø–ø–æ–π, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç—Ç–æ—Ç
@router.message(Register.photofile1, F.content_type.in_({ContentType.DOCUMENT, ContentType.PHOTO}), F.media_group_id)
async def handle_media_group(message: Message, bot: Bot, state: FSMContext):
    media_group_id = message.media_group_id
    username = message.from_user.username
    data = await state.get_data()
    await send_typing_and_message(message.chat.id, bot, Texts.Messages.PROCESSING_FILES, state)
    await mes_user_history(message, state)
    try:
        if media_group_id not in media_groups_cache:
            media_groups_cache[media_group_id] = {
                "username": username,
                "documents": [],
                "processed": False,
                "invalid": False
            }

        group_data = media_groups_cache[media_group_id]

        if group_data["processed"] or group_data["invalid"]:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É
        if message.document:
            document_data = {
                "file_id": message.document.file_id,
                "file_name": message.document.file_name
            }
        elif message.photo:
            document_data = {
                "file_id": message.photo[-1].file_id,
                "file_name": None
            }
        group_data["documents"].append(document_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 3 —Ñ–∞–π–ª–∞
        if len(group_data["documents"]) > 3:
            group_data["invalid"] = True
            await message.answer(Texts.Messages.MEDIA_GROUP_LIMIT)
            return

        await asyncio.sleep(1)

        if not group_data["invalid"] and not group_data["processed"] and data["serial1"] == 'NoSerial':
            group_data["processed"] = True
            saved_files = await process_documents(group_data["documents"], username, bot)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö FSM
            fsm_data = {
                "serial1": None,
                "serial2": None,
                "serial3": None,
                "photofile1": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                "photofile2": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
                "photofile3": '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
            }

            invalid_files = []
            results = []

            for i, file_path in enumerate(saved_files):
                if i >= 3:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    break

                serial = await sn.async_get_camera_serial_number(file_path)
                file_name = os.path.basename(file_path)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
                fsm_data[f"serial{i + 1}"] = serial
                fsm_data[f"photofile{i + 1}"] = group_data["documents"][i]["file_id"]
                results.append(Messages.FILE_INFO.format(file_name=file_name, serial=serial))
                if serial == "SerialNumberNoFound":
                    invalid_files.append(file_name)
            if invalid_files:
                error_msg = Texts.Messages.SERIAL_NOT_FOUND_IN_GROUP.format(files=',\n'.join(invalid_files))
                await send_typing_and_message(message.chat.id, bot, error_msg, state)
            else:

                # –û–±–Ω–æ–≤–ª—è–µ–º FSM
                await state.update_data(fsm_data)
                await send_typing_and_message(
                    message.chat.id, bot,
                    "\n\n".join(results),
                    state
                )
                if i + 1  == 2:
                    await send_typing_and_message(message.chat.id, bot, Messages.PHOTO_UPLOAD_COMPLETE_2,
                                                  state, reply_markup=kb.getphoto)
                    await state.set_state(Register.photofile3)
                else:
                    await send_typing_and_message(message.chat.id, bot, Messages.PHOTO_UPLOAD_COMPLETE_3,
                                                  state, reply_markup=kb.getphoto)
                    await state.set_state(Register.verify)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ handle_media_group, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ö–æ—á–µ—Ç –¥–µ–Ω–µ–≥: {str(e)}")

    finally:
        if media_group_id in media_groups_cache:
            del media_groups_cache[media_group_id]

@router.message(Register.photofile1, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    try:
        await mes_user_history(message, state)
        await save_document(message, bot)
        serial = await sn.main_serial(message)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation = await vl.validate_serial(serial, state)
        if not validation['valid']:
            await send_typing_and_message(message.chat.id, bot, validation['message'], state)
            return
        await state.update_data(photofile1=message.document.file_id, serial1=serial)
        await message.answer(
            Texts.Messages.PHOTO_1.format(
                file_name=message.document.file_name,
                serial=serial
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=kb.getphoto
        )
        await state.set_state(Register.photofile2)
    except TelegramBadRequest as e:
        if "file is too big" in str(e):
            await send_typing_and_message(message.chat.id, bot, Messages.BIG_FILE, state, parse_mode=ParseMode.HTML)
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@router.message(Register.photofile2, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    try:
        await mes_user_history(message, state)
        await save_document(message, bot)
        serial = await sn.main_serial(message)
        validation = await vl.validate_serial(serial, state)
        if not validation['valid']:
            await send_typing_and_message(message.chat.id, bot, validation['message'], state)
            return
        await state.update_data(serial2=serial, photofile2=message.document.file_id)
        await message.answer(
            Texts.Messages.PHOTO_2.format(
                file_name=message.document.file_name,
                serial=serial
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=kb.getphoto
        )
        await state.set_state(Register.photofile3)
    except TelegramBadRequest as e:
        if "file is too big" in str(e):
            await send_typing_and_message(message.chat.id, bot, Messages.BIG_FILE, state, parse_mode=ParseMode.HTML)
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@router.message(Register.photofile3, F.document)
async def register_photofile(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await mes_user_history(message, state)
    if data["serial3"] == None or data["serial3"] == 'NoSerial':
        try:
            await save_document(message, bot)
            serial = await sn.main_serial(message)
            validation = await vl.validate_serial(serial, state)
            if not validation['valid']:
                await send_typing_and_message(message.chat.id, bot, validation['message'], state)
                return
            await state.update_data(serial3=serial, photofile3=message.document.file_id)
            await message.answer(
                Texts.Messages.PHOTO_3.format(
                    file_name=message.document.file_name,
                    serial=serial
                ),
                parse_mode=ParseMode.HTML,
                reply_markup=kb.getphoto
            )
            await state.set_state(Register.verify)
        except TelegramBadRequest as e:
            if "file is too big" in str(e):
                await send_typing_and_message(message.chat.id, bot, Messages.BIG_FILE, state, parse_mode=ParseMode.HTML)
            else:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        await state.set_state(Register.verify)


@router.message(Register.verify, F.document)
async def many_camer(message: types.Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    await delete_all_previous_messages(message.chat.id, state, bot)
    await send_typing_and_message(
        message.chat.id, bot,
        f'–£ –≤–∞—Å —á—Ç–æ 4 —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞?\n'
        f'–•–≤–∞—Ç–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!',
        state, reply_markup=kb.getphoto
    )

#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º—ë—Ç—Å—è –∫–Ω–æ–ø–∫–∞
@router.message(Register.verify, ~F.command, ~F.text.in_({'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'}))
async def handle_start_state(message: types.Message):
    if not message.text or not message.text.startswith('/') or not message.text.join('–æ—Ç–º–µ–Ω–∞'):
    # """–£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            notify = await message.answer("‚ö†Ô∏è –†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            await asyncio.sleep(3)
            await notify.delete()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –µ–≥–æ ID
# @router.message(F.document)
# async def get_document(message: Message):
#     await message.answer(f'ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {message.document.file_id}')

@router.message(Register.verify, F.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile1, F.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile2, F.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
@router.message(Register.photofile3, F.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É')
async  def verify(message: types.Message, state: FSMContext, bot: Bot):
        await mes_user_history(message, state)
        await delete_all_previous_messages(message.chat.id, state, bot)
        await send_typing_and_message(
            message.chat.id, bot,
            '–°–ø–∞—Å–∏–±–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:',
            state, reply_markup=ReplyKeyboardRemove()
        )

        logging.info(F.data)
        data = await state.get_data()
        role = await rq.get_role_name(data["role"])
        if data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile2"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile1"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {role}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        elif data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞' and data["photofile2"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer_document(data["photofile1"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {role}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        elif data["photofile3"]  == '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞':
            await message.answer_document(data["photofile1"])
            await message.answer_document(data["photofile2"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {role}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n'
                f'2Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã: {data["serial2"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)

        else:
            await message.answer_document(data["photofile1"])
            await message.answer_document(data["photofile2"])
            await message.answer_document(data["photofile3"])
            await message.answer(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\n'
                f'ü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n'
                f'ü™™ –í–∞—à–∏ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\n'
                f'üì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\n'
                f'‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™Ü –í–∞—à–∞ –†–æ–ª—å: {role}\n'
                f'1Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–∞–º–µ—Ä—ã: {data["serial1"]}\n'
                f'2Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≤—Ç–æ—Ä–æ–π –∫–∞–º–µ—Ä—ã: {data["serial2"]}\n'
                f'3Ô∏è‚É£ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ—Ç—å–µ–π –∫–∞–º–µ—Ä—ã: {data["serial3"]}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.proverka)
        await state.set_state(Register.verify)


@router.callback_query(Register.verify, F.data == 'no')
async  def proverka_no(callback: CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id, reply_markup=None)
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å.', show_alert=True)
    data = await state.get_data()
    role = await rq.get_role_name(data["role"])
    await callback.message.edit_text(
                f'ü™™ –í–∞—à–µ –∏–º—è RU: {data["nameRU"]}\nü™™ –í–∞—à–µ –∏–º—è EN: {data["nameEN"]}\n‚òéÔ∏è –í–∞—à –¢–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}\n'
                f'ü™™ –í–∞—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}\nüì´ –í–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {data["mailcontact"]}\nü™Ü –í–∞—à—É –†–æ–ª—å: {role}\n\n'
                f'–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=kb.edit)

#-----------------------------------------------------------------------------------------------------------------------
#   –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#-----------------------------------------------------------------------------------------------------------------------
@router.callback_query(F.data == 'RU')
async def register_nameRU2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.nameRU2)
    await callback_query.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')

@router.message(Register.nameRU2)
async def register_nameRU2(message: Message, state: FSMContext, bot: Bot):
    await mes_user_history(message, state)
    try:
        if not await vl.validate_name_ru(message.text):
            raise vl.ValidationError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è")
    except vl.ValidationError as e:
        await send_typing_and_message(message.chat.id, bot, str(e), state)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        nameRU = await vl.format_fio(message.text)
        nameEN = await vl.transliterate_name(message.text)
        initials = await vl.generate_initials(nameEN)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º generate_initials –≤–º–µ—Å—Ç–æ validate_initials

        await state.update_data(
            nameRU=nameRU,
            tg_id=message.from_user.id,
            nameEN=nameEN,
            idn=initials,
        )
    except vl.ValidationError as e:
        await send_typing_and_message(message.chat.id, bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {str(e)}", state)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞

    await state.set_state(Register.verify)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                         reply_markup=kb.getphoto)

@router.callback_query(F.data == 'EN')
async def register_nameEN2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.nameEN2)
    data = await state.get_data()
    await  callback_query.message.answer(text=f'–í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∞—à–µ –∏–º—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n'
                                              f'–°–µ–π—á–∞—Å –æ–Ω–æ —Ç–∞–∫–æ–µ: {data["nameEN"]}')

@router.message(Register.nameEN2)
async def register_nameEN2(message: Message, state: FSMContext):
    await state.update_data(nameEN=message.text)
    await state.set_state(Register.verify)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                             reply_markup=kb.getphoto)

@router.callback_query(F.data =='idn')
async  def register_idn2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.idn2)
    data = await state.get_data()
    await callback_query.message.answer(text=f'–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ, –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∏–º—è —Ñ–∞–π–ª–∞ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –≤–æ—Ç —Ç–∞–∫ KNA\n'
                              f'—Å–µ–π—á–∞—Å –≤–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã —Ç–∞–∫–∏–µ: –í–∞—à–∏ ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã: {data["idn"]}')
@router.message(Register.idn2)
async  def register_idb2(message: Message, state: FSMContext):
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ –±—É–∫–≤, –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        clean_idn = re.sub(r'[^A-Za-z]', '', message.text).upper()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤
        if len(clean_idn) != 3:
            await message.answer(
                "‚ùå ü™™ –ò–Ω–∏—Ü–∏–∞–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ —Ç—Ä—ë—Ö –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤.\n"
                "–ü—Ä–∏–º–µ—Ä: KNA\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Register.idn

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.update_data(idn=clean_idn)
        await state.set_state(Register.verify)
        await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=kb.getphoto)


@router.callback_query(F.data =='contact')
async  def register_mailcontact2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.mailcontact2)
    data = await state.get_data()
    await callback_query.message.answer(text=f'–ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã  –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ—á—Ç–∞ –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n'
                              f'—Å–µ–π—á–∞—Å –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–∞–∫–∏–µ:\n\nüì´ {data["mailcontact"]}')

@router.message(Register.mailcontact2)
async  def register_mailcontact2(message: Message, state: FSMContext):
    await state.update_data(mailcontact=message.text)
    await state.set_state(Register.verify)
    data = await state.get_data()
    text = (f"{Texts.Messages.DONE}\n" 
            f'\n–°–µ–π—á–∞—Å –≤–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–∞–∫–∏–µ:\n\nüì´  {data["mailcontact"]}')
    await message.answer(text, reply_markup=kb.getphoto)

@router.callback_query(F.data =='phone')
async  def edit_tel(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    global edit
    message = callback_query.message
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id, reply_markup=None)
    data = await state.get_data()
    await mes_user_history(message, state)
    await send_typing_and_message(
        message.chat.id, bot,
        f'üì´ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\n'
             f'—Å–µ–π—á–∞—Å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞–∫–æ–π:\n‚òéÔ∏è –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {data["tel"]}',
        state, reply_markup=kb.get_tel
    )
    await state.set_state(Register.tel)
    edit = 1


#–í–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
@router.callback_query(F.data == 'role')
async def select_rol2(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ callback_query
    await bot.edit_message_reply_markup(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, reply_markup=None)
    await state.set_state(Register.role2)
    await callback_query.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ', reply_markup=await kb.roles())

@router.callback_query(Register.role2)
async def select_rol2(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(role=callback_query.data)
    await state.set_state(Register.verify)
    await callback_query.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=kb.getphoto)
    await state.clear()

# @router.callback_query(F.data =='phone')
# async  def register_tel2(message: Message, state: FSMContext):



#-----------------------------------------------------------------------------------------------------------------------
#   –ö–æ–Ω–µ—Ü –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#-----------------------------------------------------------------------------------------------------------------------

@router.callback_query(Register.verify, F.data == 'yes')
async def proverka_yes(callback: CallbackQuery, state: FSMContext, bot: Bot):
    message = callback.message
    await delete_all_previous_messages(message.chat.id, state, bot)
    # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.edit_message_reply_markup(chat_id=callback.from_user.id, message_id=callback.message.message_id, reply_markup=None)
    await callback.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.', show_alert=True)
    await callback.message.answer('–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.')
    data = await state.get_data()
    load_dotenv()
    admin = int(os.getenv('ADMIN'))

    if data.get('is_edit'):
        await rq.save_temp_changes(callback.from_user.id, data)
        admin_text = await generate_diff_message(
            await rq.get_item_by_tg_id(callback.from_user.id),
            data
        )

        await bot.send_message(
            chat_id=admin,
            text=f"üõ† –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç @{callback.from_user.username}:\n{admin_text}",
            reply_markup=await kb.admin_approval_kb(callback.from_user.id)
        )
        await callback.message.answer(Texts.Messages.EDIT_REQUEST_SENT, parse_mode=ParseMode.HTML)
    else:
        try:
            await rq.set_item(data)
            await fu.number_row(data)
            await callback.message.answer(text=Texts.Messages.REG_SUCCESS, reply_markup=ReplyKeyboardRemove())
            await state.clear()

        except Exception as e:
                await callback.message.answer(
                    f"–û—à–∏–±–∫–∞: \n {str(e)}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É, –æ–Ω –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—Ç —Å–Ω–æ–≤–∞",reply_markup=ReplyKeyboardRemove())
                await state.clear()

# #–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ id
#     await rq.set_item(data)
#     await state.clear()
    await state.set_state(StartState.active)


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
@router.callback_query(F.data.startswith("approve_"))
async def approve_changes(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])

    if await rq.apply_temp_changes(user_id):
        await callback.message.edit_text(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {user_id} –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        await callback.bot.send_message(user_id, "‚úÖ –í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
    else:
        await callback.answer("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")


@router.callback_query(F.data.startswith("reject_"))
async def reject_changes(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])

    await rq.del_temp_changes(user_id)

    # async with async_session() as session:
    #     await session.execute(delete(TempChanges).where(TempChanges.tg_id == user_id))
    #     await session.commit()

    await callback.message.edit_text(f"‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")
    await callback.bot.send_message(user_id, "‚ùå –í–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")



#=======================================================================================================================
#                                                   –§–û–¢–û–ì–†–ê–§
#=======================================================================================================================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.callback_query(F.data == 'schedule_pers')
async def schedule_pers(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()     # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.message.answer('–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?', reply_markup=kb.find)
    await state.set_state(Find.exclude)


# –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∞–º "ABC" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
@router.callback_query(F.data == 'general')
async def handle_general_search(callback: CallbackQuery):
    await callback.answer("–ü–æ–π–¥—É –ø–æ–∏—â—É –æ–±—â–∏–µ —Å—ä–µ–º–∫–∏")

    try:
        results = await fu.find_all_text_code(
            prefix="ABC",
            exclude_words=None,
            include_values=None,
            return_below_value=True
        )
    except Exception as e:
        await callback.message.answer("üîç –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        return

    if not results:
        await callback.message.answer("üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É ABC –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    for i, (row_gs, col_gs, value, above, below_value) in enumerate(results, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ above
        if not any(val.strip() for val in above):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        details = []
        labels = ["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"]  # –ü–æ—Ä—è–¥–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç reversed(above)

        for label, val in zip(labels, reversed(above)):
            if val.strip():  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                details.append(f"   ‚ñ´Ô∏è {label}: {val.strip()}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –µ—Å—Ç—å –∫–æ–¥ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–µ—Ç–∞–ª—å)
        response = (
           f"üìå –°—ä–µ–º–∫–∞ {i}:\n"
           f"üí° –ö–æ–¥: {value}\n"
           "üìö –î–µ—Ç–∞–ª–∏:\n"
           + "\n".join(details))

        await callback.message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.callback_query(Find.exclude)
async def process_exclude_words(callback: CallbackQuery, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ callback_data
    if callback.data not in {'ready', 'clear', 'new', 'all', 'texts'}:
        await callback.answer("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
    await callback.answer('–ü–æ–π–¥—É –ø–æ–∏—â—É')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    exclude_words = []
    include_values = []
    output_format = "multiple"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ callback_data
    exclude_words = []
    if callback.data == "ready":
        exclude_words = ["", "–û–¢–ú–ï–ù–ê", "–°–ù–ò–ú–ê–Æ–¢"]
    elif callback.data == "clear":
        include_values = ["–û–¢–ú–ï–ù–ê"]
    elif callback.data == "new":
        exclude_words = ["–°–ù–Ø–¢–û", "–û–¢–ú–ï–ù–ê", "–°–ù–ò–ú–ê–Æ–¢"]
    elif callback.data == "texts":
        output_format = "single"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    # –ï—Å–ª–∏ callback_data == "exclude_none", —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ state
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await state.update_data(
        exclude_words=exclude_words,
        include_values=include_values,
        output_format=output_format
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã —É–∂–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    initials = data.get("initials")

    # –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –Ω–µ—Ç - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î
    if not initials:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tg_id = callback.from_user.id
        try:
            initials = await rq.get_initials(tg_id)
        except Exception as e:
            await callback.message.answer("üîé –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤.")
            await state.clear()
            return

    if not initials:
        await callback.message.answer("üîé –ò–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –≤ state
    await state.update_data(initials=initials)

    # # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
    # await callback.message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã")
    await state.set_state(Find.send)
    await find_all_text_code(callback.message, state)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞


@router.message(Find.send)
async def find_all_text_code(message: Message, state: FSMContext):
    data = await state.get_data()
    exclude_words = data.get("exclude_words", [])
    include_values = data.get("include_values", [])
    initials = data.get("initials", "")
    output_format = data.get("output_format", "multiple")  # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞

    try:
        results = await fu.find_all_text_code(
            prefix=initials,
            exclude_words=exclude_words,
            include_values=include_values,
            search_range="A1:AF67",
            return_below_value=False
        )

        filtered_results = [res for res in results if res[3]]

        if not filtered_results:
            await message.answer("üîé –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        if output_format == "single":
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
            full_response = []
            for i, (row, col, value, above) in enumerate(filtered_results, 1):
                below_value = await fu.get_cell_value(row + 1, col)
                part = (
                    f"üìå <u>–°—ä—ë–º–∫–∞ {i}:</u>\n"
                    # f"üí° –ö–æ–¥: <code>{value}</code>\n"
                    # f"‚úÖ –°—Ç–∞—Ç—É—Å: {below_value or '–µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    "üìö –î–µ—Ç–∞–ª–∏:\n"
                )
                details = []
                for label, val in zip(["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"], reversed(above)):
                    if val.strip():
                        details.append(f"   ‚ñ´Ô∏è {label}: {val.strip()}")
                part += "\n".join(details) if details else "   ‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                full_response.append(part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await message.answer("\n\n".join(full_response), parse_mode=ParseMode.HTML)
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            for i, (row, col, value, above) in enumerate(filtered_results, 1):
                below_value = await fu.get_cell_value(row + 1, col)
                response = (
                    f"üìå <u>–°—ä–µ–º–∫–∞ {i}:</u>\n"
                    f"üí° –ö–æ–¥: <code>{value}</code>\n"
                    f"‚úÖ –°—Ç–∞—Ç—É—Å: {below_value or '–µ—â–µ –Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    "üìö –î–µ—Ç–∞–ª–∏:\n"
                )
                details = []
                for label, val in zip(["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"], reversed(above)):
                    if val.strip():
                        details.append(f"   ‚ñ´Ô∏è {label}: {val.strip()}")
                response += "\n".join(details) if details else "   ‚îî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                sent_msg = await message.answer(response, parse_mode=ParseMode.HTML)
                keyboard = await kb.create_task_keyboard(row, col, value, sent_msg.message_id)
                await sent_msg.edit_reply_markup(reply_markup=keyboard)
                await asyncio.sleep(0.2)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    await state.clear()


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ —Å–º–µ–Ω–æ–π —Å—Ç–∞—Ç—É—Å–∞ —Å—ä–µ–º–∫–∏.
async def update_message_after_change(
        callback: CallbackQuery,
        row: int,
        col: int,
        message_id: int,
        new_value: str
):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        value = await fu.get_cell_value(row, col)
        below_value = await fu.get_cell_value(row + 1, col)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        new_text = (
            f"üìå –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            f"üí° –ö–æ–¥ —Å—ä–µ–º–∫–∏: {value}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: {below_value}\n"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.bot.edit_message_text(
            chat_id=callback.from_user.id,
            message_id=message_id,
            text=new_text,
            reply_markup=await kb.create_task_keyboard(row, col, value, message_id)
        )
    except Exception as e:
        print(f"Error updating message: {e}")

# @router.callback_query(F.data.startswith('done'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#         result = await fu.write_done(row, col)
#         if result:
#             await callback.answer(result)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#     except ValueError:
#         await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
# @router.callback_query(F.data.startswith('cancel'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         # # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         # print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#         result = await fu.write_cancel(row, col)
#         if result:
#             await callback.answer(result)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#     except ValueError:
#         await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
# @router.callback_query(F.data.startswith('code'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         # # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         # print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#         result = await fu.write_state(row, col)
#         if result:
#             await callback.answer(result)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#     except ValueError:
#         await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
# @router.callback_query(F.data.startswith('error'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         # # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         # print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#         result = await fu.write_error(row, col)
#         if result:
#             await callback.answer(result)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#     except ValueError:
#         await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ 4 —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—ä–µ–º–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø—É
# @router.callback_query(F.data.startswith('done'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str, message_id_str  = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         message_id = int(message_id_str)
#
#         # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å
#         result_msg, new_value = await fu.write_done(row, col)
#
#         if result_msg and new_value:
#             await update_message_after_change(callback, row, col, message_id, new_value)
#             await callback.answer(result_msg)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
#
#
# @router.callback_query(F.data.startswith('cancel'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str, message_id_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         message_id = int(message_id_str)
#
#         # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å
#         result_msg, new_value = await fu.write_cancel(row, col)
#
#         if result_msg and new_value:
#             await update_message_after_change(callback, row, col, message_id, new_value)
#             await callback.answer(result_msg)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
# @router.callback_query(F.data.startswith('code'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str, message_id_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         message_id = int(message_id_str)
#
#         # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å
#         result_msg, new_value = await fu.write_state(row, col)
#
#         if result_msg and new_value:
#             await update_message_after_change(callback, row, col, message_id, new_value)
#             await callback.answer(result_msg)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")
#
# @router.callback_query(F.data.startswith('error'))
# async def handle_done_callback(callback: CallbackQuery):
#     try:
#         _, row_str, col_str, message_id_str = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         message_id = int(message_id_str)
#
#         # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#         print(f"DEBUG: Writing to row={row}, col={col}")
#         # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–∏—Å—å
#         result_msg, new_value = await fu.write_error(row, col)
#
#         if result_msg and new_value:
#             await update_message_after_change(callback, row, col, message_id, new_value)
#             await callback.answer(result_msg)
#         else:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
#         print(f"Callback error: {e}")


@router.callback_query(F.data.startswith('done'))
async def handle_done_callback(callback: CallbackQuery):
    await handle_status_update(callback, "–°–ù–Ø–¢–û")

@router.callback_query(F.data.startswith('cancel'))
async def handle_cancel_callback(callback: CallbackQuery):
    await handle_status_update(callback, "–û–¢–ú–ï–ù–ê")

@router.callback_query(F.data.startswith('code'))
async def handle_code_callback(callback: CallbackQuery):
    await handle_status_update(callback, "–°–ù–ò–ú–ê–Æ–¢")

@router.callback_query(F.data.startswith('error'))
async def handle_error_callback(callback: CallbackQuery):
    await handle_status_update(callback, "")

# async def handle_status_update(callback: CallbackQuery, status: str):
#     try:
#         # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback_data
#         _, row_str, col_str, msg_id = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         target_message_id = int(msg_id)  # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ
#         result = None
#         if status == "–°–ù–Ø–¢–û":
#             result = await fu.write_done(row, col)
#         elif status == "–û–¢–ú–ï–ù–ê":
#             result = await fu.write_cancel(row, col)
#         elif status == "–°–ù–ò–ú–ê–Æ–¢":
#             result = await fu.write_state(row, col)
#         else:
#             result = await fu.write_error(row, col)
#
#         if not result:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
#             return
#
#         # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#         current_code = await fu.get_cell_value(row, col)
#         current_status = await fu.get_cell_value(row + 1, col)
#         above_values = await fu.get_above_values(row, col, 3)
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
#         new_text = (
#             f"üìå –ó–∞–ø–∏—Å–∞–ª–∏ –æ—Ç–≤–µ—Ç\n"
#             f"üí° –ö–æ–¥: {current_code}\n"
#             f"‚úÖ –°—Ç–∞—Ç—É—Å: {current_status}\n"
#             "üìö –î–µ—Ç–∞–ª–∏:\n"
#         )
#         for label, val in zip(["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"], (above_values)):
#             if val:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
#                 new_text += f"   ‚ñ´Ô∏è {label}: {val}\n"
#
#         # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await callback.bot.edit_message_text(
#             chat_id=callback.from_user.id,
#             message_id=target_message_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–µ–≤–æ–π ID
#             text=new_text,
#             reply_markup=None
#         )
#         await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
#         print(f"Error in handle_status_update: {e}")


# async def handle_status_update(callback: CallbackQuery, status: str):
#     try:
#         # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
#         _, row_str, col_str, code_str, msg_id = callback.data.split(':')
#         row = int(row_str)
#         col = int(col_str)
#         code = str(code_str)
#         target_message_id = int(msg_id)
#
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
#         result = None
#         if status == "–°–ù–Ø–¢–û":
#             result = await fu.write_done(row, col)
#         elif status == "–û–¢–ú–ï–ù–ê":
#             result = await fu.write_cancel(row, col)
#         elif status == "–°–ù–ò–ú–ê–Æ–¢":
#             result = await fu.write_state(row, col)
#         else:
#             result = await fu.write_error(row, col)
#
#         if not result or not result[0]:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
#             return
#
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
#         current_code = await fu.get_cell_value(row, col)
#         current_status = await fu.get_cell_value(row + 1, col)
#         above_values = await fu.get_above_values(row, col, 3)
#
#
#         current_date = datetime.now()
#         sheet_name = f"{current_date.day}_{Texts.MonthName.NAMES[current_date.month]}"
#         # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ–π
#         if current_code:
#             sync_success = await fu.update_org_table_status(
#                 code=current_code,
#                 status=status,
#                 sheet_name=sheet_name  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
#             )
#
#             if not sync_success:
#                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {current_code}")
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         new_text = (
#             f"üìå –ó–∞–ø–∏—Å–∞–ª–∏ –æ—Ç–≤–µ—Ç\n\n"
#             f"üí° –ö–æ–¥: {current_code}\n"
#             f"‚úÖ –°—Ç–∞—Ç—É—Å: {current_status}\n"
#             #"üìö –î–µ—Ç–∞–ª–∏:\n"
#         )
#         for label, val in zip(["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"], above_values):
#             if val: new_text += f"   ‚ñ´Ô∏è {label}: {val}\n"
#
#         # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¢–û–õ–¨–ö–û –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–°–ù–ò–ú–ê–Æ–¢"
#         reply_markup = None
#         if status == "–°–ù–ò–ú–ê–Æ–¢":
#             reply_markup = await kb.status_done_error(row, col, code, target_message_id)
#         elif status == "":
#             reply_markup = await kb.create_task_keyboard(row, col, code, target_message_id)
#
#         try:
#             await callback.bot.edit_message_text(
#                 chat_id=callback.from_user.id,
#                 message_id=target_message_id,
#                 text=new_text,
#                 reply_markup=reply_markup
#             )
#             await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
#         except TelegramBadRequest as e:
#             if "message is not modified" in str(e):
#                 # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
#                 await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
#             elif "query is too old" in str(e):
#                 await callback.answer("‚ö†Ô∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /menu")
#             else:
#                 raise
#
#     except Exception as e:
#         await callback.answer(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
#         logging.error(f"Error in handle_status_update: {e}")


# –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
async def handle_status_update(callback: CallbackQuery, status: str):
    try:
        # –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback
        _, row_str, col_str, code_str, msg_id = callback.data.split(':')
        row = int(row_str)
        col = int(col_str)
        code = str(code_str)
        target_message_id = int(msg_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        new_text = f"üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...\nüí° –ö–æ–¥: {code}"
        reply_markup = None

        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
            await callback.bot.edit_message_text(
                chat_id=callback.from_user.id,
                message_id=target_message_id,
                text=new_text,
                reply_markup=reply_markup
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –æ—Ç–≤–µ—Ç–µ: {e}")

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            result = None
            if status == "–°–ù–Ø–¢–û":
                result = await fu.write_done(row, col)
            elif status == "–û–¢–ú–ï–ù–ê":
                result = await fu.write_cancel(row, col)
            elif status == "–°–ù–ò–ú–ê–Æ–¢":
                result = await fu.write_state(row, col)
            else:
                result = await fu.write_error(row, col)

            if not result or not result[0]:
                raise ValueError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            current_code = await fu.get_cell_value(row, col)
            current_status = await fu.get_cell_value(row + 1, col)
            above_values = await fu.get_above_values(row, col, 3)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_text = (
                f"üìå –ó–∞–ø–∏—Å–∞–ª–∏ –æ—Ç–≤–µ—Ç\n\n"
                f"üí° –ö–æ–¥: {current_code}\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: {current_status}\n"
            )
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å 2) –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–µ—Ç–∫—É
            labels = ["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–°–æ–±—ã—Ç–∏–µ"]
            if len(above_values) >= 3 and above_values[2]:
                new_text += f"   ‚ñ´Ô∏è {labels[2]}: {above_values[2]}\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if status == "–°–ù–ò–ú–ê–Æ–¢":
                reply_markup = await kb.status_done_error(row, col, code, target_message_id)
            elif status == "":
                reply_markup = await kb.create_task_keyboard(row, col, code, target_message_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.bot.edit_message_text(
                    chat_id=callback.from_user.id,
                    message_id=target_message_id,
                    text=new_text,
                    reply_markup=reply_markup
                )
                await callback.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω")
                elif "message to edit not found" in str(e):
                    await callback.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                elif "message can't be edited" in str(e):
                    await callback.answer("‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å")
                else:
                    raise

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ–π (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
            current_date = datetime.now()
            sheet_name = f"{current_date.day}_{Texts.MonthName.NAMES[current_date.month]}"

            if current_code:
                try:
                    sync_success = await fu.update_org_table_status(
                        code=current_code,
                        status=status,
                        sheet_name=sheet_name
                    )
                    if not sync_success:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {current_code}")
                except Exception as sync_error:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_error}")

        except Exception as processing_error:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_error}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            try:
                await callback.bot.edit_message_text(
                    chat_id=callback.from_user.id,
                    message_id=target_message_id,
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                )
            except:
                pass

    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            await callback.answer("‚ö†Ô∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /menu")
        else:
            logging.error(f"TelegramBadRequest: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API")

    except ValueError as e:
        await callback.answer(str(e))

    except Exception as e:
        logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


# # –í—ã–≤–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
# @router.message(Find.send)
# async def find_cod(message: Message, state: FSMContext):
#     result = await fu.find_text_code(text=message.text)
#
#     if not result:
#         await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
#         await state.clear()
#         return
#
#     response = "üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
#     labels = ["–í—Ä–µ–º—è", "–ú–µ—Å—Ç–æ", "–ù–∞–∑–≤–∞–Ω–∏–µ"]  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫
#
#     for row, col, value, above in result:
#         response += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —Å—Ç—Ä–æ–∫–∞ {row}, –∫–æ–ª–æ–Ω–∫–∞ {col}\n\n"
#
#         # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
#         filtered_above = [
#             (label, val)
#             for label, val in zip(labels, reversed(above))
#             if val.strip()
#         ]
#
#         if filtered_above:
#             response += "üìå –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
#             for label, val in filtered_above:
#                 response += f"   ‚ñ´Ô∏è {label}: {val}\n"
#
#         response += f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: {value}\n\n"
#
#     await message.answer(response.strip())
#     await state.clear()


# @router.message(Find.send)
# async def find_cod(message: Message, state: FSMContext):
#     result = await fu.find_text_code(text=message.text)
#     for row, col, value, above in result:
#         await message.answer(f'–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:')
#         for i, val in enumerate(reversed(above), start=1):
#             await message.answer(f'{val}')
#         await message.answer(f'{value}')
#     await state.clear()

# @router.message(Find.send)
# async def find_text(message: Message, state: FSMContext):
#     result = await fu.find_text_in_sheet(text=message.text)
#     await message.answer(f'–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª: {result}')
#     await state.clear()


